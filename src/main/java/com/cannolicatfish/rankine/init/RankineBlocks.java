package com.cannolicatfish.rankine.init;

import com.cannolicatfish.rankine.ProjectRankine;
import com.cannolicatfish.rankine.blocks.*;
import com.cannolicatfish.rankine.blocks.asphalt.*;
import com.cannolicatfish.rankine.blocks.fluiddrain.FluidDrainTile;
import com.cannolicatfish.rankine.blocks.plants.*;
import com.cannolicatfish.rankine.blocks.alloyfurnace.AlloyFurnaceBlock;
import com.cannolicatfish.rankine.blocks.alloyfurnace.AlloyFurnaceContainer;
import com.cannolicatfish.rankine.blocks.alloyfurnace.AlloyFurnaceTile;
import com.cannolicatfish.rankine.blocks.alloys.AlloyBlock;
import com.cannolicatfish.rankine.blocks.alloys.AlloyBlockTile;
import com.cannolicatfish.rankine.blocks.beehiveoven.BeehiveOvenPitBlock;
import com.cannolicatfish.rankine.blocks.crucible.CrucibleBlock;
import com.cannolicatfish.rankine.blocks.crucible.CrucibleContainer;
import com.cannolicatfish.rankine.blocks.crucible.CrucibleTile;
import com.cannolicatfish.rankine.blocks.dac.DiamondAnvilCellBlock;
import com.cannolicatfish.rankine.blocks.evaporationtower.EvaporationTowerBlock;
import com.cannolicatfish.rankine.blocks.evaporationtower.EvaporationTowerContainer;
import com.cannolicatfish.rankine.blocks.evaporationtower.EvaporationTowerTile;
import com.cannolicatfish.rankine.blocks.gyratorycrusher.GyratoryCrusherBlock;
import com.cannolicatfish.rankine.blocks.gyratorycrusher.GyratoryCrusherContainer;
import com.cannolicatfish.rankine.blocks.gyratorycrusher.GyratoryCrusherTile;
import com.cannolicatfish.rankine.blocks.inductionfurnace.InductionFurnaceBlock;
import com.cannolicatfish.rankine.blocks.inductionfurnace.InductionFurnaceContainer;
import com.cannolicatfish.rankine.blocks.inductionfurnace.InductionFurnaceTile;
import com.cannolicatfish.rankine.blocks.laserquarry.LaserQuarryBlock;
import com.cannolicatfish.rankine.blocks.laserquarry.LaserQuarryContainer;
import com.cannolicatfish.rankine.blocks.laserquarry.LaserQuarryTile;
import com.cannolicatfish.rankine.blocks.pistoncrusher.PistonCrusherBlock;
import com.cannolicatfish.rankine.blocks.pistoncrusher.PistonCrusherContainer;
import com.cannolicatfish.rankine.blocks.pistoncrusher.PistonCrusherTile;
import com.cannolicatfish.rankine.blocks.rankinebox.RankineBoxBlock;
import com.cannolicatfish.rankine.blocks.rankinebox.RankineBoxContainer;
import com.cannolicatfish.rankine.blocks.rankinebox.RankineBoxTile;
import com.cannolicatfish.rankine.blocks.fluiddrain.FluidDrainBlock;
import com.cannolicatfish.rankine.blocks.templatetable.TemplateTableBlock;
import com.cannolicatfish.rankine.blocks.templatetable.TemplateTableContainer;
import com.cannolicatfish.rankine.blocks.tap.TapBarrelBlock;
import com.cannolicatfish.rankine.blocks.tap.TapLineBlock;
import com.cannolicatfish.rankine.blocks.tap.TreeTapBlock;
import com.cannolicatfish.rankine.blocks.tilledsoil.TilledSoilBlock;
import com.cannolicatfish.rankine.util.GasUtilsEnum;
import com.cannolicatfish.rankine.world.trees.*;
import net.minecraft.block.*;
import net.minecraft.block.material.Material;
import net.minecraft.block.material.MaterialColor;
import net.minecraft.inventory.container.ContainerType;
import net.minecraft.state.properties.BlockStateProperties;
import net.minecraft.tileentity.TileEntityType;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.common.ToolType;
import net.minecraftforge.fml.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.ObjectHolder;

import java.util.function.ToIntFunction;

public class RankineBlocks {

    public static final DeferredRegister<Block> REGISTRY = DeferredRegister.create(ForgeRegistries.BLOCKS, ProjectRankine.MODID);


    //Base Properties
    public static Block.Properties DEF_STONE = Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F);
    public static Block.Properties DEF_ORE = Block.Properties.create(Material.ROCK).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F, 3.0F);
    public static Block.Properties DEF_METAL_BLOCK = Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,6.0F).harvestLevel(0);
    public static Block.Properties DEF_WOOD = Block.Properties.create(Material.WOOD).sound(SoundType.WOOD).harvestTool(ToolType.AXE).hardnessAndResistance(2.0F, 3.0F).harvestLevel(0);
    public static Block.Properties DEF_LEAVES = Block.Properties.create(Material.LEAVES).tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.PLANT).notSolid();


    public static final RegistryObject<Block> GRAY_GRANITE_PILLAR = REGISTRY.register("gray_granite_pillar", () -> new RotatedPillarBlock(Block.Properties.create(Material.ROCK).sound(SoundType.BONE).hardnessAndResistance(2.0F).harvestLevel(0).harvestTool(ToolType.PICKAXE)));


    public static final RegistryObject<Block> PEGMATITE = REGISTRY.register("pegmatite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PEGMATITE = REGISTRY.register("polished_pegmatite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_BRICKS = REGISTRY.register("pegmatite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_SLAB = REGISTRY.register("pegmatite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PEGMATITE_SLAB = REGISTRY.register("polished_pegmatite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_BRICKS_SLAB = REGISTRY.register("pegmatite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_STAIRS = REGISTRY.register("pegmatite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PEGMATITE_STAIRS = REGISTRY.register("polished_pegmatite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_BRICKS_STAIRS = REGISTRY.register("pegmatite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_WALL = REGISTRY.register("pegmatite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PEGMATITE_WALL = REGISTRY.register("polished_pegmatite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_BRICKS_WALL = REGISTRY.register("pegmatite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_VERTICAL_SLAB = REGISTRY.register("pegmatite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PEGMATITE_VERTICAL_SLAB = REGISTRY.register("polished_pegmatite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("pegmatite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PEGMATITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PEGMATITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PEGMATITE_HL.get())));
    public static final RegistryObject<Block> PEGMATITE_PRESSURE_PLATE = REGISTRY.register("pegmatite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PEGMATITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("pegmatite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PEGMATITE_BUTTON = REGISTRY.register("pegmatite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> GRAY_GRANITE = REGISTRY.register("gray_granite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_GRANITE = REGISTRY.register("polished_gray_granite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_BRICKS = REGISTRY.register("gray_granite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_SLAB = REGISTRY.register("gray_granite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_GRANITE_SLAB = REGISTRY.register("polished_gray_granite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_BRICKS_SLAB = REGISTRY.register("gray_granite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_STAIRS = REGISTRY.register("gray_granite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_GRANITE_STAIRS = REGISTRY.register("polished_gray_granite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_BRICKS_STAIRS = REGISTRY.register("gray_granite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_WALL = REGISTRY.register("gray_granite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_GRANITE_WALL = REGISTRY.register("polished_gray_granite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_BRICKS_WALL = REGISTRY.register("gray_granite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_VERTICAL_SLAB = REGISTRY.register("gray_granite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_GRANITE_VERTICAL_SLAB = REGISTRY.register("polished_gray_granite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("gray_granite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_GRANITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_GRANITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_GRANITE_HL.get())));
    public static final RegistryObject<Block> GRAY_GRANITE_PRESSURE_PLATE = REGISTRY.register("gray_granite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GRAY_GRANITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("gray_granite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GRAY_GRANITE_BUTTON = REGISTRY.register("gray_granite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> GRANODIORITE = REGISTRY.register("granodiorite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRANODIORITE = REGISTRY.register("polished_granodiorite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_BRICKS = REGISTRY.register("granodiorite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_SLAB = REGISTRY.register("granodiorite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRANODIORITE_SLAB = REGISTRY.register("polished_granodiorite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_BRICKS_SLAB = REGISTRY.register("granodiorite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_STAIRS = REGISTRY.register("granodiorite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRANODIORITE_STAIRS = REGISTRY.register("polished_granodiorite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_BRICKS_STAIRS = REGISTRY.register("granodiorite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_WALL = REGISTRY.register("granodiorite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRANODIORITE_WALL = REGISTRY.register("polished_granodiorite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_BRICKS_WALL = REGISTRY.register("granodiorite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_VERTICAL_SLAB = REGISTRY.register("granodiorite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRANODIORITE_VERTICAL_SLAB = REGISTRY.register("polished_granodiorite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("granodiorite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRANODIORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRANODIORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRANODIORITE_HL.get())));
    public static final RegistryObject<Block> GRANODIORITE_PRESSURE_PLATE = REGISTRY.register("granodiorite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GRANODIORITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("granodiorite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GRANODIORITE_BUTTON = REGISTRY.register("granodiorite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE = REGISTRY.register("hornblende_andesite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_HORNBLENDE_ANDESITE = REGISTRY.register("polished_hornblende_andesite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_BRICKS = REGISTRY.register("hornblende_andesite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_SLAB = REGISTRY.register("hornblende_andesite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_HORNBLENDE_ANDESITE_SLAB = REGISTRY.register("polished_hornblende_andesite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_BRICKS_SLAB = REGISTRY.register("hornblende_andesite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_STAIRS = REGISTRY.register("hornblende_andesite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_HORNBLENDE_ANDESITE_STAIRS = REGISTRY.register("polished_hornblende_andesite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_BRICKS_STAIRS = REGISTRY.register("hornblende_andesite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_WALL = REGISTRY.register("hornblende_andesite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_HORNBLENDE_ANDESITE_WALL = REGISTRY.register("polished_hornblende_andesite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_BRICKS_WALL = REGISTRY.register("hornblende_andesite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_VERTICAL_SLAB = REGISTRY.register("hornblende_andesite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_HORNBLENDE_ANDESITE_VERTICAL_SLAB = REGISTRY.register("polished_hornblende_andesite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("hornblende_andesite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get())));
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_PRESSURE_PLATE = REGISTRY.register("hornblende_andesite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("hornblende_andesite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> HORNBLENDE_ANDESITE_BUTTON = REGISTRY.register("hornblende_andesite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> THOLEIITIC_BASALT = REGISTRY.register("tholeiitic_basalt", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> POLISHED_THOLEIITIC_BASALT = REGISTRY.register("polished_tholeiitic_basalt", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_BRICKS = REGISTRY.register("tholeiitic_basalt_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_SLAB = REGISTRY.register("tholeiitic_basalt_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> POLISHED_THOLEIITIC_BASALT_SLAB = REGISTRY.register("polished_tholeiitic_basalt_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_BRICKS_SLAB = REGISTRY.register("tholeiitic_basalt_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_STAIRS = REGISTRY.register("tholeiitic_basalt_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> POLISHED_THOLEIITIC_BASALT_STAIRS = REGISTRY.register("polished_tholeiitic_basalt_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_BRICKS_STAIRS = REGISTRY.register("tholeiitic_basalt_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_WALL = REGISTRY.register("tholeiitic_basalt_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> POLISHED_THOLEIITIC_BASALT_WALL = REGISTRY.register("polished_tholeiitic_basalt_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_BRICKS_WALL = REGISTRY.register("tholeiitic_basalt_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_VERTICAL_SLAB = REGISTRY.register("tholeiitic_basalt_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> POLISHED_THOLEIITIC_BASALT_VERTICAL_SLAB = REGISTRY.register("polished_tholeiitic_basalt_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_BRICKS_VERTICAL_SLAB = REGISTRY.register("tholeiitic_basalt_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.THOLEIITIC_BASALT_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get())));
    public static final RegistryObject<Block> THOLEIITIC_BASALT_PRESSURE_PLATE = REGISTRY.register("tholeiitic_basalt_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> THOLEIITIC_BASALT_BRICKS_PRESSURE_PLATE = REGISTRY.register("tholeiitic_basalt_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> THOLEIITIC_BASALT_BUTTON = REGISTRY.register("tholeiitic_basalt_button", RankineStoneButton::new);
    public static final RegistryObject<Block> GABBRO = REGISTRY.register("gabbro", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> POLISHED_GABBRO = REGISTRY.register("polished_gabbro", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_BRICKS = REGISTRY.register("gabbro_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_SLAB = REGISTRY.register("gabbro_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> POLISHED_GABBRO_SLAB = REGISTRY.register("polished_gabbro_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_BRICKS_SLAB = REGISTRY.register("gabbro_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_STAIRS = REGISTRY.register("gabbro_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> POLISHED_GABBRO_STAIRS = REGISTRY.register("polished_gabbro_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_BRICKS_STAIRS = REGISTRY.register("gabbro_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_WALL = REGISTRY.register("gabbro_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> POLISHED_GABBRO_WALL = REGISTRY.register("polished_gabbro_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_BRICKS_WALL = REGISTRY.register("gabbro_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_VERTICAL_SLAB = REGISTRY.register("gabbro_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> POLISHED_GABBRO_VERTICAL_SLAB = REGISTRY.register("polished_gabbro_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_BRICKS_VERTICAL_SLAB = REGISTRY.register("gabbro_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GABBRO_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GABBRO_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GABBRO_HL.get())));
    public static final RegistryObject<Block> GABBRO_PRESSURE_PLATE = REGISTRY.register("gabbro_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GABBRO_BRICKS_PRESSURE_PLATE = REGISTRY.register("gabbro_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GABBRO_BUTTON = REGISTRY.register("gabbro_button", RankineStoneButton::new);
    public static final RegistryObject<Block> SHONKINITE = REGISTRY.register("shonkinite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHONKINITE = REGISTRY.register("polished_shonkinite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_BRICKS = REGISTRY.register("shonkinite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_SLAB = REGISTRY.register("shonkinite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHONKINITE_SLAB = REGISTRY.register("polished_shonkinite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_BRICKS_SLAB = REGISTRY.register("shonkinite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_STAIRS = REGISTRY.register("shonkinite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHONKINITE_STAIRS = REGISTRY.register("polished_shonkinite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_BRICKS_STAIRS = REGISTRY.register("shonkinite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_WALL = REGISTRY.register("shonkinite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHONKINITE_WALL = REGISTRY.register("polished_shonkinite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_BRICKS_WALL = REGISTRY.register("shonkinite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_VERTICAL_SLAB = REGISTRY.register("shonkinite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHONKINITE_VERTICAL_SLAB = REGISTRY.register("polished_shonkinite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("shonkinite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHONKINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHONKINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHONKINITE_HL.get())));
    public static final RegistryObject<Block> SHONKINITE_PRESSURE_PLATE = REGISTRY.register("shonkinite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SHONKINITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("shonkinite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SHONKINITE_BUTTON = REGISTRY.register("shonkinite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> ANORTHOSITE = REGISTRY.register("anorthosite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ANORTHOSITE = REGISTRY.register("polished_anorthosite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_BRICKS = REGISTRY.register("anorthosite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_SLAB = REGISTRY.register("anorthosite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ANORTHOSITE_SLAB = REGISTRY.register("polished_anorthosite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_BRICKS_SLAB = REGISTRY.register("anorthosite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_STAIRS = REGISTRY.register("anorthosite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ANORTHOSITE_STAIRS = REGISTRY.register("polished_anorthosite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_BRICKS_STAIRS = REGISTRY.register("anorthosite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_WALL = REGISTRY.register("anorthosite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ANORTHOSITE_WALL = REGISTRY.register("polished_anorthosite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_BRICKS_WALL = REGISTRY.register("anorthosite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_VERTICAL_SLAB = REGISTRY.register("anorthosite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ANORTHOSITE_VERTICAL_SLAB = REGISTRY.register("polished_anorthosite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("anorthosite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ANORTHOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ANORTHOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ANORTHOSITE_HL.get())));
    public static final RegistryObject<Block> ANORTHOSITE_PRESSURE_PLATE = REGISTRY.register("anorthosite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> ANORTHOSITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("anorthosite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> ANORTHOSITE_BUTTON = REGISTRY.register("anorthosite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> NORITE = REGISTRY.register("norite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_NORITE = REGISTRY.register("polished_norite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_BRICKS = REGISTRY.register("norite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_SLAB = REGISTRY.register("norite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_NORITE_SLAB = REGISTRY.register("polished_norite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_BRICKS_SLAB = REGISTRY.register("norite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_STAIRS = REGISTRY.register("norite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_NORITE_STAIRS = REGISTRY.register("polished_norite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_BRICKS_STAIRS = REGISTRY.register("norite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_WALL = REGISTRY.register("norite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_NORITE_WALL = REGISTRY.register("polished_norite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_BRICKS_WALL = REGISTRY.register("norite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_VERTICAL_SLAB = REGISTRY.register("norite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_NORITE_VERTICAL_SLAB = REGISTRY.register("polished_norite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("norite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.NORITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.NORITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.NORITE_HL.get())));
    public static final RegistryObject<Block> NORITE_PRESSURE_PLATE = REGISTRY.register("norite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> NORITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("norite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> NORITE_BUTTON = REGISTRY.register("norite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> PYROXENITE = REGISTRY.register("pyroxenite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PYROXENITE = REGISTRY.register("polished_pyroxenite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_BRICKS = REGISTRY.register("pyroxenite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_SLAB = REGISTRY.register("pyroxenite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PYROXENITE_SLAB = REGISTRY.register("polished_pyroxenite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_BRICKS_SLAB = REGISTRY.register("pyroxenite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_STAIRS = REGISTRY.register("pyroxenite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PYROXENITE_STAIRS = REGISTRY.register("polished_pyroxenite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_BRICKS_STAIRS = REGISTRY.register("pyroxenite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_WALL = REGISTRY.register("pyroxenite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PYROXENITE_WALL = REGISTRY.register("polished_pyroxenite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_BRICKS_WALL = REGISTRY.register("pyroxenite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_VERTICAL_SLAB = REGISTRY.register("pyroxenite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PYROXENITE_VERTICAL_SLAB = REGISTRY.register("polished_pyroxenite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("pyroxenite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PYROXENITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PYROXENITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PYROXENITE_HL.get())));
    public static final RegistryObject<Block> PYROXENITE_PRESSURE_PLATE = REGISTRY.register("pyroxenite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PYROXENITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("pyroxenite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PYROXENITE_BUTTON = REGISTRY.register("pyroxenite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> RHYOLITE = REGISTRY.register("rhyolite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RHYOLITE = REGISTRY.register("polished_rhyolite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_BRICKS = REGISTRY.register("rhyolite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_SLAB = REGISTRY.register("rhyolite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RHYOLITE_SLAB = REGISTRY.register("polished_rhyolite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_BRICKS_SLAB = REGISTRY.register("rhyolite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_STAIRS = REGISTRY.register("rhyolite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RHYOLITE_STAIRS = REGISTRY.register("polished_rhyolite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_BRICKS_STAIRS = REGISTRY.register("rhyolite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_WALL = REGISTRY.register("rhyolite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RHYOLITE_WALL = REGISTRY.register("polished_rhyolite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_BRICKS_WALL = REGISTRY.register("rhyolite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_VERTICAL_SLAB = REGISTRY.register("rhyolite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RHYOLITE_VERTICAL_SLAB = REGISTRY.register("polished_rhyolite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("rhyolite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RHYOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RHYOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get())));
    public static final RegistryObject<Block> RHYOLITE_PRESSURE_PLATE = REGISTRY.register("rhyolite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> RHYOLITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("rhyolite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> RHYOLITE_BUTTON = REGISTRY.register("rhyolite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> COMENDITE = REGISTRY.register("comendite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_COMENDITE = REGISTRY.register("polished_comendite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_BRICKS = REGISTRY.register("comendite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_SLAB = REGISTRY.register("comendite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_COMENDITE_SLAB = REGISTRY.register("polished_comendite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_BRICKS_SLAB = REGISTRY.register("comendite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_STAIRS = REGISTRY.register("comendite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_COMENDITE_STAIRS = REGISTRY.register("polished_comendite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_BRICKS_STAIRS = REGISTRY.register("comendite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_WALL = REGISTRY.register("comendite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_COMENDITE_WALL = REGISTRY.register("polished_comendite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_BRICKS_WALL = REGISTRY.register("comendite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_VERTICAL_SLAB = REGISTRY.register("comendite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_COMENDITE_VERTICAL_SLAB = REGISTRY.register("polished_comendite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("comendite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.COMENDITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.COMENDITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.COMENDITE_HL.get())));
    public static final RegistryObject<Block> COMENDITE_PRESSURE_PLATE = REGISTRY.register("comendite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> COMENDITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("comendite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> COMENDITE_BUTTON = REGISTRY.register("comendite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> BLACK_DACITE = REGISTRY.register("black_dacite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_DACITE = REGISTRY.register("polished_black_dacite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_BRICKS = REGISTRY.register("black_dacite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_SLAB = REGISTRY.register("black_dacite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_DACITE_SLAB = REGISTRY.register("polished_black_dacite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_BRICKS_SLAB = REGISTRY.register("black_dacite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_STAIRS = REGISTRY.register("black_dacite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_DACITE_STAIRS = REGISTRY.register("polished_black_dacite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_BRICKS_STAIRS = REGISTRY.register("black_dacite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_WALL = REGISTRY.register("black_dacite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_DACITE_WALL = REGISTRY.register("polished_black_dacite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_BRICKS_WALL = REGISTRY.register("black_dacite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_VERTICAL_SLAB = REGISTRY.register("black_dacite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_DACITE_VERTICAL_SLAB = REGISTRY.register("polished_black_dacite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("black_dacite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_DACITE_HL.get())));
    public static final RegistryObject<Block> BLACK_DACITE_PRESSURE_PLATE = REGISTRY.register("black_dacite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> BLACK_DACITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("black_dacite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> BLACK_DACITE_BUTTON = REGISTRY.register("black_dacite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> RED_DACITE = REGISTRY.register("red_dacite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_DACITE = REGISTRY.register("polished_red_dacite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_BRICKS = REGISTRY.register("red_dacite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_SLAB = REGISTRY.register("red_dacite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_DACITE_SLAB = REGISTRY.register("polished_red_dacite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_BRICKS_SLAB = REGISTRY.register("red_dacite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_STAIRS = REGISTRY.register("red_dacite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_DACITE_STAIRS = REGISTRY.register("polished_red_dacite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_BRICKS_STAIRS = REGISTRY.register("red_dacite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_WALL = REGISTRY.register("red_dacite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_DACITE_WALL = REGISTRY.register("polished_red_dacite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_BRICKS_WALL = REGISTRY.register("red_dacite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_VERTICAL_SLAB = REGISTRY.register("red_dacite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_DACITE_VERTICAL_SLAB = REGISTRY.register("polished_red_dacite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("red_dacite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_DACITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_DACITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_DACITE_HL.get())));
    public static final RegistryObject<Block> RED_DACITE_PRESSURE_PLATE = REGISTRY.register("red_dacite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> RED_DACITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("red_dacite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> RED_DACITE_BUTTON = REGISTRY.register("red_dacite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> RED_PORPHYRY = REGISTRY.register("red_porphyry", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_PORPHYRY = REGISTRY.register("polished_red_porphyry", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_BRICKS = REGISTRY.register("red_porphyry_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_SLAB = REGISTRY.register("red_porphyry_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_PORPHYRY_SLAB = REGISTRY.register("polished_red_porphyry_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_BRICKS_SLAB = REGISTRY.register("red_porphyry_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_STAIRS = REGISTRY.register("red_porphyry_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_PORPHYRY_STAIRS = REGISTRY.register("polished_red_porphyry_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_BRICKS_STAIRS = REGISTRY.register("red_porphyry_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_WALL = REGISTRY.register("red_porphyry_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_PORPHYRY_WALL = REGISTRY.register("polished_red_porphyry_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_BRICKS_WALL = REGISTRY.register("red_porphyry_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_VERTICAL_SLAB = REGISTRY.register("red_porphyry_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_RED_PORPHYRY_VERTICAL_SLAB = REGISTRY.register("polished_red_porphyry_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_BRICKS_VERTICAL_SLAB = REGISTRY.register("red_porphyry_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.RED_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.RED_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.RED_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> RED_PORPHYRY_PRESSURE_PLATE = REGISTRY.register("red_porphyry_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> RED_PORPHYRY_BRICKS_PRESSURE_PLATE = REGISTRY.register("red_porphyry_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> RED_PORPHYRY_BUTTON = REGISTRY.register("red_porphyry_button", RankineStoneButton::new);
    public static final RegistryObject<Block> PURPLE_PORPHYRY = REGISTRY.register("purple_porphyry", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_PURPLE_PORPHYRY = REGISTRY.register("polished_purple_porphyry", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_BRICKS = REGISTRY.register("purple_porphyry_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_SLAB = REGISTRY.register("purple_porphyry_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_PURPLE_PORPHYRY_SLAB = REGISTRY.register("polished_purple_porphyry_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_BRICKS_SLAB = REGISTRY.register("purple_porphyry_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_STAIRS = REGISTRY.register("purple_porphyry_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_PURPLE_PORPHYRY_STAIRS = REGISTRY.register("polished_purple_porphyry_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_BRICKS_STAIRS = REGISTRY.register("purple_porphyry_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_WALL = REGISTRY.register("purple_porphyry_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_PURPLE_PORPHYRY_WALL = REGISTRY.register("polished_purple_porphyry_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_BRICKS_WALL = REGISTRY.register("purple_porphyry_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_VERTICAL_SLAB = REGISTRY.register("purple_porphyry_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> POLISHED_PURPLE_PORPHYRY_VERTICAL_SLAB = REGISTRY.register("polished_purple_porphyry_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_BRICKS_VERTICAL_SLAB = REGISTRY.register("purple_porphyry_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PURPLE_PORPHYRY_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PURPLE_PORPHYRY_HL.get())));
    public static final RegistryObject<Block> PURPLE_PORPHYRY_PRESSURE_PLATE = REGISTRY.register("purple_porphyry_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PURPLE_PORPHYRY_BRICKS_PRESSURE_PLATE = REGISTRY.register("purple_porphyry_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PURPLE_PORPHYRY_BUTTON = REGISTRY.register("purple_porphyry_button", RankineStoneButton::new);
    public static final RegistryObject<Block> PERIDOTITE = REGISTRY.register("peridotite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PERIDOTITE = REGISTRY.register("polished_peridotite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_BRICKS = REGISTRY.register("peridotite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_SLAB = REGISTRY.register("peridotite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PERIDOTITE_SLAB = REGISTRY.register("polished_peridotite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_BRICKS_SLAB = REGISTRY.register("peridotite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_STAIRS = REGISTRY.register("peridotite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PERIDOTITE_STAIRS = REGISTRY.register("polished_peridotite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_BRICKS_STAIRS = REGISTRY.register("peridotite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_WALL = REGISTRY.register("peridotite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PERIDOTITE_WALL = REGISTRY.register("polished_peridotite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_BRICKS_WALL = REGISTRY.register("peridotite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_VERTICAL_SLAB = REGISTRY.register("peridotite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PERIDOTITE_VERTICAL_SLAB = REGISTRY.register("polished_peridotite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("peridotite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PERIDOTITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PERIDOTITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PERIDOTITE_HL.get())));
    public static final RegistryObject<Block> PERIDOTITE_PRESSURE_PLATE = REGISTRY.register("peridotite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PERIDOTITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("peridotite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PERIDOTITE_BUTTON = REGISTRY.register("peridotite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> TROCTOLITE = REGISTRY.register("troctolite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_TROCTOLITE = REGISTRY.register("polished_troctolite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_BRICKS = REGISTRY.register("troctolite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_SLAB = REGISTRY.register("troctolite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_TROCTOLITE_SLAB = REGISTRY.register("polished_troctolite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_BRICKS_SLAB = REGISTRY.register("troctolite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_STAIRS = REGISTRY.register("troctolite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_TROCTOLITE_STAIRS = REGISTRY.register("polished_troctolite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_BRICKS_STAIRS = REGISTRY.register("troctolite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_WALL = REGISTRY.register("troctolite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_TROCTOLITE_WALL = REGISTRY.register("polished_troctolite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_BRICKS_WALL = REGISTRY.register("troctolite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_VERTICAL_SLAB = REGISTRY.register("troctolite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_TROCTOLITE_VERTICAL_SLAB = REGISTRY.register("polished_troctolite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("troctolite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.TROCTOLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.TROCTOLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.TROCTOLITE_HL.get())));
    public static final RegistryObject<Block> TROCTOLITE_PRESSURE_PLATE = REGISTRY.register("troctolite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> TROCTOLITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("troctolite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> TROCTOLITE_BUTTON = REGISTRY.register("troctolite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> KIMBERLITE = REGISTRY.register("kimberlite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KIMBERLITE = REGISTRY.register("polished_kimberlite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_BRICKS = REGISTRY.register("kimberlite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_SLAB = REGISTRY.register("kimberlite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KIMBERLITE_SLAB = REGISTRY.register("polished_kimberlite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_BRICKS_SLAB = REGISTRY.register("kimberlite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_STAIRS = REGISTRY.register("kimberlite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KIMBERLITE_STAIRS = REGISTRY.register("polished_kimberlite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_BRICKS_STAIRS = REGISTRY.register("kimberlite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_WALL = REGISTRY.register("kimberlite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KIMBERLITE_WALL = REGISTRY.register("polished_kimberlite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_BRICKS_WALL = REGISTRY.register("kimberlite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_VERTICAL_SLAB = REGISTRY.register("kimberlite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KIMBERLITE_VERTICAL_SLAB = REGISTRY.register("polished_kimberlite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("kimberlite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KIMBERLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KIMBERLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KIMBERLITE_HL.get())));
    public static final RegistryObject<Block> KIMBERLITE_PRESSURE_PLATE = REGISTRY.register("kimberlite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> KIMBERLITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("kimberlite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> KIMBERLITE_BUTTON = REGISTRY.register("kimberlite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> KOMATIITE = REGISTRY.register("komatiite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KOMATIITE = REGISTRY.register("polished_komatiite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_BRICKS = REGISTRY.register("komatiite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_SLAB = REGISTRY.register("komatiite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KOMATIITE_SLAB = REGISTRY.register("polished_komatiite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_BRICKS_SLAB = REGISTRY.register("komatiite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_STAIRS = REGISTRY.register("komatiite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KOMATIITE_STAIRS = REGISTRY.register("polished_komatiite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_BRICKS_STAIRS = REGISTRY.register("komatiite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_WALL = REGISTRY.register("komatiite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KOMATIITE_WALL = REGISTRY.register("polished_komatiite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_BRICKS_WALL = REGISTRY.register("komatiite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_VERTICAL_SLAB = REGISTRY.register("komatiite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_KOMATIITE_VERTICAL_SLAB = REGISTRY.register("polished_komatiite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("komatiite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.KOMATIITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.KOMATIITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.KOMATIITE_HL.get())));
    public static final RegistryObject<Block> KOMATIITE_PRESSURE_PLATE = REGISTRY.register("komatiite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> KOMATIITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("komatiite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> KOMATIITE_BUTTON = REGISTRY.register("komatiite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> PUMICE = REGISTRY.register("pumice", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PUMICE = REGISTRY.register("polished_pumice", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_BRICKS = REGISTRY.register("pumice_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_SLAB = REGISTRY.register("pumice_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PUMICE_SLAB = REGISTRY.register("polished_pumice_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_BRICKS_SLAB = REGISTRY.register("pumice_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_STAIRS = REGISTRY.register("pumice_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PUMICE_STAIRS = REGISTRY.register("polished_pumice_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_BRICKS_STAIRS = REGISTRY.register("pumice_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_WALL = REGISTRY.register("pumice_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PUMICE_WALL = REGISTRY.register("polished_pumice_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_BRICKS_WALL = REGISTRY.register("pumice_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_VERTICAL_SLAB = REGISTRY.register("pumice_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PUMICE_VERTICAL_SLAB = REGISTRY.register("polished_pumice_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_BRICKS_VERTICAL_SLAB = REGISTRY.register("pumice_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PUMICE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PUMICE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PUMICE_HL.get())));
    public static final RegistryObject<Block> PUMICE_PRESSURE_PLATE = REGISTRY.register("pumice_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PUMICE_BRICKS_PRESSURE_PLATE = REGISTRY.register("pumice_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PUMICE_BUTTON = REGISTRY.register("pumice_button", RankineStoneButton::new);
    public static final RegistryObject<Block> SCORIA = REGISTRY.register("scoria", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_SCORIA = REGISTRY.register("polished_scoria", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_BRICKS = REGISTRY.register("scoria_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_SLAB = REGISTRY.register("scoria_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_SCORIA_SLAB = REGISTRY.register("polished_scoria_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_BRICKS_SLAB = REGISTRY.register("scoria_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_STAIRS = REGISTRY.register("scoria_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_SCORIA_STAIRS = REGISTRY.register("polished_scoria_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_BRICKS_STAIRS = REGISTRY.register("scoria_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_WALL = REGISTRY.register("scoria_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_SCORIA_WALL = REGISTRY.register("polished_scoria_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_BRICKS_WALL = REGISTRY.register("scoria_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_VERTICAL_SLAB = REGISTRY.register("scoria_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_SCORIA_VERTICAL_SLAB = REGISTRY.register("polished_scoria_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_BRICKS_VERTICAL_SLAB = REGISTRY.register("scoria_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SCORIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SCORIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SCORIA_HL.get())));
    public static final RegistryObject<Block> SCORIA_PRESSURE_PLATE = REGISTRY.register("scoria_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SCORIA_BRICKS_PRESSURE_PLATE = REGISTRY.register("scoria_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SCORIA_BUTTON = REGISTRY.register("scoria_button", RankineStoneButton::new);
    public static final RegistryObject<Block> ROSE_MARBLE = REGISTRY.register("rose_marble", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ROSE_MARBLE = REGISTRY.register("polished_rose_marble", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_BRICKS = REGISTRY.register("rose_marble_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_SLAB = REGISTRY.register("rose_marble_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ROSE_MARBLE_SLAB = REGISTRY.register("polished_rose_marble_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_BRICKS_SLAB = REGISTRY.register("rose_marble_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_STAIRS = REGISTRY.register("rose_marble_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ROSE_MARBLE_STAIRS = REGISTRY.register("polished_rose_marble_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_BRICKS_STAIRS = REGISTRY.register("rose_marble_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_WALL = REGISTRY.register("rose_marble_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ROSE_MARBLE_WALL = REGISTRY.register("polished_rose_marble_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_BRICKS_WALL = REGISTRY.register("rose_marble_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_VERTICAL_SLAB = REGISTRY.register("rose_marble_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ROSE_MARBLE_VERTICAL_SLAB = REGISTRY.register("polished_rose_marble_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_BRICKS_VERTICAL_SLAB = REGISTRY.register("rose_marble_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ROSE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ROSE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ROSE_MARBLE_HL.get())));
    public static final RegistryObject<Block> ROSE_MARBLE_PRESSURE_PLATE = REGISTRY.register("rose_marble_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> ROSE_MARBLE_BRICKS_PRESSURE_PLATE = REGISTRY.register("rose_marble_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> ROSE_MARBLE_BUTTON = REGISTRY.register("rose_marble_button", RankineStoneButton::new);
    public static final RegistryObject<Block> WHITE_MARBLE = REGISTRY.register("white_marble", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_WHITE_MARBLE = REGISTRY.register("polished_white_marble", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_BRICKS = REGISTRY.register("white_marble_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_SLAB = REGISTRY.register("white_marble_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_WHITE_MARBLE_SLAB = REGISTRY.register("polished_white_marble_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_BRICKS_SLAB = REGISTRY.register("white_marble_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_STAIRS = REGISTRY.register("white_marble_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_WHITE_MARBLE_STAIRS = REGISTRY.register("polished_white_marble_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_BRICKS_STAIRS = REGISTRY.register("white_marble_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_WALL = REGISTRY.register("white_marble_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_WHITE_MARBLE_WALL = REGISTRY.register("polished_white_marble_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_BRICKS_WALL = REGISTRY.register("white_marble_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_VERTICAL_SLAB = REGISTRY.register("white_marble_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_WHITE_MARBLE_VERTICAL_SLAB = REGISTRY.register("polished_white_marble_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_BRICKS_VERTICAL_SLAB = REGISTRY.register("white_marble_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.WHITE_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.WHITE_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.WHITE_MARBLE_HL.get())));
    public static final RegistryObject<Block> WHITE_MARBLE_PRESSURE_PLATE = REGISTRY.register("white_marble_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> WHITE_MARBLE_BRICKS_PRESSURE_PLATE = REGISTRY.register("white_marble_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> WHITE_MARBLE_BUTTON = REGISTRY.register("white_marble_button", RankineStoneButton::new);
    public static final RegistryObject<Block> GRAY_MARBLE = REGISTRY.register("gray_marble", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_MARBLE = REGISTRY.register("polished_gray_marble", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_BRICKS = REGISTRY.register("gray_marble_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_SLAB = REGISTRY.register("gray_marble_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_MARBLE_SLAB = REGISTRY.register("polished_gray_marble_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_BRICKS_SLAB = REGISTRY.register("gray_marble_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_STAIRS = REGISTRY.register("gray_marble_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_MARBLE_STAIRS = REGISTRY.register("polished_gray_marble_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_BRICKS_STAIRS = REGISTRY.register("gray_marble_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_WALL = REGISTRY.register("gray_marble_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_MARBLE_WALL = REGISTRY.register("polished_gray_marble_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_BRICKS_WALL = REGISTRY.register("gray_marble_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_VERTICAL_SLAB = REGISTRY.register("gray_marble_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_GRAY_MARBLE_VERTICAL_SLAB = REGISTRY.register("polished_gray_marble_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_BRICKS_VERTICAL_SLAB = REGISTRY.register("gray_marble_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GRAY_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GRAY_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GRAY_MARBLE_HL.get())));
    public static final RegistryObject<Block> GRAY_MARBLE_PRESSURE_PLATE = REGISTRY.register("gray_marble_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GRAY_MARBLE_BRICKS_PRESSURE_PLATE = REGISTRY.register("gray_marble_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GRAY_MARBLE_BUTTON = REGISTRY.register("gray_marble_button", RankineStoneButton::new);
    public static final RegistryObject<Block> BLACK_MARBLE = REGISTRY.register("black_marble", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_MARBLE = REGISTRY.register("polished_black_marble", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_BRICKS = REGISTRY.register("black_marble_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_SLAB = REGISTRY.register("black_marble_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_MARBLE_SLAB = REGISTRY.register("polished_black_marble_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_BRICKS_SLAB = REGISTRY.register("black_marble_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_STAIRS = REGISTRY.register("black_marble_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_MARBLE_STAIRS = REGISTRY.register("polished_black_marble_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_BRICKS_STAIRS = REGISTRY.register("black_marble_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_WALL = REGISTRY.register("black_marble_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_MARBLE_WALL = REGISTRY.register("polished_black_marble_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_BRICKS_WALL = REGISTRY.register("black_marble_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_VERTICAL_SLAB = REGISTRY.register("black_marble_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLACK_MARBLE_VERTICAL_SLAB = REGISTRY.register("polished_black_marble_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_BRICKS_VERTICAL_SLAB = REGISTRY.register("black_marble_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLACK_MARBLE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLACK_MARBLE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLACK_MARBLE_HL.get())));
    public static final RegistryObject<Block> BLACK_MARBLE_PRESSURE_PLATE = REGISTRY.register("black_marble_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> BLACK_MARBLE_BRICKS_PRESSURE_PLATE = REGISTRY.register("black_marble_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> BLACK_MARBLE_BUTTON = REGISTRY.register("black_marble_button", RankineStoneButton::new);
    public static final RegistryObject<Block> GNEISS = REGISTRY.register("gneiss", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> POLISHED_GNEISS = REGISTRY.register("polished_gneiss", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_BRICKS = REGISTRY.register("gneiss_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_SLAB = REGISTRY.register("gneiss_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> POLISHED_GNEISS_SLAB = REGISTRY.register("polished_gneiss_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_BRICKS_SLAB = REGISTRY.register("gneiss_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_STAIRS = REGISTRY.register("gneiss_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> POLISHED_GNEISS_STAIRS = REGISTRY.register("polished_gneiss_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_BRICKS_STAIRS = REGISTRY.register("gneiss_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_WALL = REGISTRY.register("gneiss_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> POLISHED_GNEISS_WALL = REGISTRY.register("polished_gneiss_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_BRICKS_WALL = REGISTRY.register("gneiss_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_VERTICAL_SLAB = REGISTRY.register("gneiss_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> POLISHED_GNEISS_VERTICAL_SLAB = REGISTRY.register("polished_gneiss_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_BRICKS_VERTICAL_SLAB = REGISTRY.register("gneiss_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GNEISS_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GNEISS_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GNEISS_HL.get())));
    public static final RegistryObject<Block> GNEISS_PRESSURE_PLATE = REGISTRY.register("gneiss_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GNEISS_BRICKS_PRESSURE_PLATE = REGISTRY.register("gneiss_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GNEISS_BUTTON = REGISTRY.register("gneiss_button", RankineStoneButton::new);
    public static final RegistryObject<Block> MICA_SCHIST = REGISTRY.register("mica_schist", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_MICA_SCHIST = REGISTRY.register("polished_mica_schist", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_BRICKS = REGISTRY.register("mica_schist_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_SLAB = REGISTRY.register("mica_schist_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_MICA_SCHIST_SLAB = REGISTRY.register("polished_mica_schist_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_BRICKS_SLAB = REGISTRY.register("mica_schist_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_STAIRS = REGISTRY.register("mica_schist_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_MICA_SCHIST_STAIRS = REGISTRY.register("polished_mica_schist_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_BRICKS_STAIRS = REGISTRY.register("mica_schist_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_WALL = REGISTRY.register("mica_schist_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_MICA_SCHIST_WALL = REGISTRY.register("polished_mica_schist_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_BRICKS_WALL = REGISTRY.register("mica_schist_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_VERTICAL_SLAB = REGISTRY.register("mica_schist_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_MICA_SCHIST_VERTICAL_SLAB = REGISTRY.register("polished_mica_schist_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_BRICKS_VERTICAL_SLAB = REGISTRY.register("mica_schist_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MICA_SCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MICA_SCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MICA_SCHIST_HL.get())));
    public static final RegistryObject<Block> MICA_SCHIST_PRESSURE_PLATE = REGISTRY.register("mica_schist_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> MICA_SCHIST_BRICKS_PRESSURE_PLATE = REGISTRY.register("mica_schist_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> MICA_SCHIST_BUTTON = REGISTRY.register("mica_schist_button", RankineStoneButton::new);
    public static final RegistryObject<Block> BLUESCHIST = REGISTRY.register("blueschist", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLUESCHIST = REGISTRY.register("polished_blueschist", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_BRICKS = REGISTRY.register("blueschist_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_SLAB = REGISTRY.register("blueschist_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLUESCHIST_SLAB = REGISTRY.register("polished_blueschist_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_BRICKS_SLAB = REGISTRY.register("blueschist_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_STAIRS = REGISTRY.register("blueschist_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLUESCHIST_STAIRS = REGISTRY.register("polished_blueschist_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_BRICKS_STAIRS = REGISTRY.register("blueschist_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_WALL = REGISTRY.register("blueschist_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLUESCHIST_WALL = REGISTRY.register("polished_blueschist_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_BRICKS_WALL = REGISTRY.register("blueschist_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_VERTICAL_SLAB = REGISTRY.register("blueschist_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_BLUESCHIST_VERTICAL_SLAB = REGISTRY.register("polished_blueschist_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_BRICKS_VERTICAL_SLAB = REGISTRY.register("blueschist_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BLUESCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BLUESCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BLUESCHIST_HL.get())));
    public static final RegistryObject<Block> BLUESCHIST_PRESSURE_PLATE = REGISTRY.register("blueschist_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> BLUESCHIST_BRICKS_PRESSURE_PLATE = REGISTRY.register("blueschist_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> BLUESCHIST_BUTTON = REGISTRY.register("blueschist_button", RankineStoneButton::new);
    public static final RegistryObject<Block> GREENSCHIST = REGISTRY.register("greenschist", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_GREENSCHIST = REGISTRY.register("polished_greenschist", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_BRICKS = REGISTRY.register("greenschist_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_SLAB = REGISTRY.register("greenschist_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_GREENSCHIST_SLAB = REGISTRY.register("polished_greenschist_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_BRICKS_SLAB = REGISTRY.register("greenschist_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_STAIRS = REGISTRY.register("greenschist_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_GREENSCHIST_STAIRS = REGISTRY.register("polished_greenschist_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_BRICKS_STAIRS = REGISTRY.register("greenschist_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_WALL = REGISTRY.register("greenschist_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_GREENSCHIST_WALL = REGISTRY.register("polished_greenschist_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_BRICKS_WALL = REGISTRY.register("greenschist_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_VERTICAL_SLAB = REGISTRY.register("greenschist_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> POLISHED_GREENSCHIST_VERTICAL_SLAB = REGISTRY.register("polished_greenschist_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_BRICKS_VERTICAL_SLAB = REGISTRY.register("greenschist_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.GREENSCHIST_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.GREENSCHIST_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.GREENSCHIST_HL.get())));
    public static final RegistryObject<Block> GREENSCHIST_PRESSURE_PLATE = REGISTRY.register("greenschist_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GREENSCHIST_BRICKS_PRESSURE_PLATE = REGISTRY.register("greenschist_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> GREENSCHIST_BUTTON = REGISTRY.register("greenschist_button", RankineStoneButton::new);
    public static final RegistryObject<Block> PHYLLITE = REGISTRY.register("phyllite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PHYLLITE = REGISTRY.register("polished_phyllite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_BRICKS = REGISTRY.register("phyllite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_SLAB = REGISTRY.register("phyllite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PHYLLITE_SLAB = REGISTRY.register("polished_phyllite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_BRICKS_SLAB = REGISTRY.register("phyllite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_STAIRS = REGISTRY.register("phyllite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PHYLLITE_STAIRS = REGISTRY.register("polished_phyllite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_BRICKS_STAIRS = REGISTRY.register("phyllite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_WALL = REGISTRY.register("phyllite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PHYLLITE_WALL = REGISTRY.register("polished_phyllite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_BRICKS_WALL = REGISTRY.register("phyllite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_VERTICAL_SLAB = REGISTRY.register("phyllite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_PHYLLITE_VERTICAL_SLAB = REGISTRY.register("polished_phyllite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("phyllite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.PHYLLITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.PHYLLITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.PHYLLITE_HL.get())));
    public static final RegistryObject<Block> PHYLLITE_PRESSURE_PLATE = REGISTRY.register("phyllite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PHYLLITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("phyllite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> PHYLLITE_BUTTON = REGISTRY.register("phyllite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> SLATE = REGISTRY.register("slate", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SLATE = REGISTRY.register("polished_slate", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_BRICKS = REGISTRY.register("slate_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_SLAB = REGISTRY.register("slate_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SLATE_SLAB = REGISTRY.register("polished_slate_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_BRICKS_SLAB = REGISTRY.register("slate_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_STAIRS = REGISTRY.register("slate_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SLATE_STAIRS = REGISTRY.register("polished_slate_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_BRICKS_STAIRS = REGISTRY.register("slate_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_WALL = REGISTRY.register("slate_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SLATE_WALL = REGISTRY.register("polished_slate_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_BRICKS_WALL = REGISTRY.register("slate_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_VERTICAL_SLAB = REGISTRY.register("slate_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SLATE_VERTICAL_SLAB = REGISTRY.register("polished_slate_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_BRICKS_VERTICAL_SLAB = REGISTRY.register("slate_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SLATE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SLATE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SLATE_HL.get())));
    public static final RegistryObject<Block> SLATE_PRESSURE_PLATE = REGISTRY.register("slate_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SLATE_BRICKS_PRESSURE_PLATE = REGISTRY.register("slate_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SLATE_BUTTON = REGISTRY.register("slate_button", RankineStoneButton::new);
    public static final RegistryObject<Block> QUARTZITE = REGISTRY.register("quartzite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_QUARTZITE = REGISTRY.register("polished_quartzite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_BRICKS = REGISTRY.register("quartzite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_SLAB = REGISTRY.register("quartzite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_QUARTZITE_SLAB = REGISTRY.register("polished_quartzite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_BRICKS_SLAB = REGISTRY.register("quartzite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_STAIRS = REGISTRY.register("quartzite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_QUARTZITE_STAIRS = REGISTRY.register("polished_quartzite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_BRICKS_STAIRS = REGISTRY.register("quartzite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_WALL = REGISTRY.register("quartzite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_QUARTZITE_WALL = REGISTRY.register("polished_quartzite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_BRICKS_WALL = REGISTRY.register("quartzite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_VERTICAL_SLAB = REGISTRY.register("quartzite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_QUARTZITE_VERTICAL_SLAB = REGISTRY.register("polished_quartzite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("quartzite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.QUARTZITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.QUARTZITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.QUARTZITE_HL.get())));
    public static final RegistryObject<Block> QUARTZITE_PRESSURE_PLATE = REGISTRY.register("quartzite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> QUARTZITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("quartzite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> QUARTZITE_BUTTON = REGISTRY.register("quartzite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> SKARN = REGISTRY.register("skarn", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> POLISHED_SKARN = REGISTRY.register("polished_skarn", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_BRICKS = REGISTRY.register("skarn_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_SLAB = REGISTRY.register("skarn_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> POLISHED_SKARN_SLAB = REGISTRY.register("polished_skarn_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_BRICKS_SLAB = REGISTRY.register("skarn_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_STAIRS = REGISTRY.register("skarn_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> POLISHED_SKARN_STAIRS = REGISTRY.register("polished_skarn_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_BRICKS_STAIRS = REGISTRY.register("skarn_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_WALL = REGISTRY.register("skarn_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> POLISHED_SKARN_WALL = REGISTRY.register("polished_skarn_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_BRICKS_WALL = REGISTRY.register("skarn_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_VERTICAL_SLAB = REGISTRY.register("skarn_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> POLISHED_SKARN_VERTICAL_SLAB = REGISTRY.register("polished_skarn_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_BRICKS_VERTICAL_SLAB = REGISTRY.register("skarn_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SKARN_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SKARN_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SKARN_HL.get())));
    public static final RegistryObject<Block> SKARN_PRESSURE_PLATE = REGISTRY.register("skarn_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SKARN_BRICKS_PRESSURE_PLATE = REGISTRY.register("skarn_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SKARN_BUTTON = REGISTRY.register("skarn_button", RankineStoneButton::new);
    public static final RegistryObject<Block> MARIPOSITE = REGISTRY.register("mariposite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARIPOSITE = REGISTRY.register("polished_mariposite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_BRICKS = REGISTRY.register("mariposite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_SLAB = REGISTRY.register("mariposite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARIPOSITE_SLAB = REGISTRY.register("polished_mariposite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_BRICKS_SLAB = REGISTRY.register("mariposite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_STAIRS = REGISTRY.register("mariposite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARIPOSITE_STAIRS = REGISTRY.register("polished_mariposite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_BRICKS_STAIRS = REGISTRY.register("mariposite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_WALL = REGISTRY.register("mariposite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARIPOSITE_WALL = REGISTRY.register("polished_mariposite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_BRICKS_WALL = REGISTRY.register("mariposite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_VERTICAL_SLAB = REGISTRY.register("mariposite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARIPOSITE_VERTICAL_SLAB = REGISTRY.register("polished_mariposite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("mariposite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARIPOSITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARIPOSITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARIPOSITE_HL.get())));
    public static final RegistryObject<Block> MARIPOSITE_PRESSURE_PLATE = REGISTRY.register("mariposite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> MARIPOSITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("mariposite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> MARIPOSITE_BUTTON = REGISTRY.register("mariposite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> LIMESTONE = REGISTRY.register("limestone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_LIMESTONE = REGISTRY.register("polished_limestone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_BRICKS = REGISTRY.register("limestone_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_SLAB = REGISTRY.register("limestone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_LIMESTONE_SLAB = REGISTRY.register("polished_limestone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_BRICKS_SLAB = REGISTRY.register("limestone_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_STAIRS = REGISTRY.register("limestone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_LIMESTONE_STAIRS = REGISTRY.register("polished_limestone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_BRICKS_STAIRS = REGISTRY.register("limestone_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_WALL = REGISTRY.register("limestone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_LIMESTONE_WALL = REGISTRY.register("polished_limestone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_BRICKS_WALL = REGISTRY.register("limestone_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_VERTICAL_SLAB = REGISTRY.register("limestone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_LIMESTONE_VERTICAL_SLAB = REGISTRY.register("polished_limestone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_BRICKS_VERTICAL_SLAB = REGISTRY.register("limestone_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.LIMESTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.LIMESTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.LIMESTONE_HL.get())));
    public static final RegistryObject<Block> LIMESTONE_PRESSURE_PLATE = REGISTRY.register("limestone_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> LIMESTONE_BRICKS_PRESSURE_PLATE = REGISTRY.register("limestone_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> LIMESTONE_BUTTON = REGISTRY.register("limestone_button", RankineStoneButton::new);
    public static final RegistryObject<Block> DOLOSTONE = REGISTRY.register("dolostone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_DOLOSTONE = REGISTRY.register("polished_dolostone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_BRICKS = REGISTRY.register("dolostone_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_SLAB = REGISTRY.register("dolostone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_DOLOSTONE_SLAB = REGISTRY.register("polished_dolostone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_BRICKS_SLAB = REGISTRY.register("dolostone_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_STAIRS = REGISTRY.register("dolostone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_DOLOSTONE_STAIRS = REGISTRY.register("polished_dolostone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_BRICKS_STAIRS = REGISTRY.register("dolostone_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_WALL = REGISTRY.register("dolostone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_DOLOSTONE_WALL = REGISTRY.register("polished_dolostone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_BRICKS_WALL = REGISTRY.register("dolostone_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_VERTICAL_SLAB = REGISTRY.register("dolostone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_DOLOSTONE_VERTICAL_SLAB = REGISTRY.register("polished_dolostone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_BRICKS_VERTICAL_SLAB = REGISTRY.register("dolostone_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.DOLOSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.DOLOSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.DOLOSTONE_HL.get())));
    public static final RegistryObject<Block> DOLOSTONE_PRESSURE_PLATE = REGISTRY.register("dolostone_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> DOLOSTONE_BRICKS_PRESSURE_PLATE = REGISTRY.register("dolostone_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> DOLOSTONE_BUTTON = REGISTRY.register("dolostone_button", RankineStoneButton::new);
    public static final RegistryObject<Block> CHALK = REGISTRY.register("chalk", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> POLISHED_CHALK = REGISTRY.register("polished_chalk", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_BRICKS = REGISTRY.register("chalk_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_SLAB = REGISTRY.register("chalk_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> POLISHED_CHALK_SLAB = REGISTRY.register("polished_chalk_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_BRICKS_SLAB = REGISTRY.register("chalk_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_STAIRS = REGISTRY.register("chalk_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> POLISHED_CHALK_STAIRS = REGISTRY.register("polished_chalk_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_BRICKS_STAIRS = REGISTRY.register("chalk_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_WALL = REGISTRY.register("chalk_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> POLISHED_CHALK_WALL = REGISTRY.register("polished_chalk_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_BRICKS_WALL = REGISTRY.register("chalk_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_VERTICAL_SLAB = REGISTRY.register("chalk_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> POLISHED_CHALK_VERTICAL_SLAB = REGISTRY.register("polished_chalk_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_BRICKS_VERTICAL_SLAB = REGISTRY.register("chalk_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.CHALK_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.CHALK_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.CHALK_HL.get())));
    public static final RegistryObject<Block> CHALK_PRESSURE_PLATE = REGISTRY.register("chalk_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> CHALK_BRICKS_PRESSURE_PLATE = REGISTRY.register("chalk_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> CHALK_BUTTON = REGISTRY.register("chalk_button", RankineStoneButton::new);
    public static final RegistryObject<Block> SHALE = REGISTRY.register("shale", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHALE = REGISTRY.register("polished_shale", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_BRICKS = REGISTRY.register("shale_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_SLAB = REGISTRY.register("shale_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHALE_SLAB = REGISTRY.register("polished_shale_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_BRICKS_SLAB = REGISTRY.register("shale_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_STAIRS = REGISTRY.register("shale_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHALE_STAIRS = REGISTRY.register("polished_shale_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_BRICKS_STAIRS = REGISTRY.register("shale_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_WALL = REGISTRY.register("shale_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHALE_WALL = REGISTRY.register("polished_shale_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_BRICKS_WALL = REGISTRY.register("shale_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_VERTICAL_SLAB = REGISTRY.register("shale_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SHALE_VERTICAL_SLAB = REGISTRY.register("polished_shale_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_BRICKS_VERTICAL_SLAB = REGISTRY.register("shale_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SHALE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SHALE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SHALE_HL.get())));
    public static final RegistryObject<Block> SHALE_PRESSURE_PLATE = REGISTRY.register("shale_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SHALE_BRICKS_PRESSURE_PLATE = REGISTRY.register("shale_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SHALE_BUTTON = REGISTRY.register("shale_button", RankineStoneButton::new);
    public static final RegistryObject<Block> SILTSTONE = REGISTRY.register("siltstone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SILTSTONE = REGISTRY.register("polished_siltstone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_BRICKS = REGISTRY.register("siltstone_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_SLAB = REGISTRY.register("siltstone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SILTSTONE_SLAB = REGISTRY.register("polished_siltstone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_BRICKS_SLAB = REGISTRY.register("siltstone_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_STAIRS = REGISTRY.register("siltstone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SILTSTONE_STAIRS = REGISTRY.register("polished_siltstone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_BRICKS_STAIRS = REGISTRY.register("siltstone_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_WALL = REGISTRY.register("siltstone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SILTSTONE_WALL = REGISTRY.register("polished_siltstone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_BRICKS_WALL = REGISTRY.register("siltstone_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_VERTICAL_SLAB = REGISTRY.register("siltstone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SILTSTONE_VERTICAL_SLAB = REGISTRY.register("polished_siltstone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_BRICKS_VERTICAL_SLAB = REGISTRY.register("siltstone_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SILTSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SILTSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SILTSTONE_HL.get())));
    public static final RegistryObject<Block> SILTSTONE_PRESSURE_PLATE = REGISTRY.register("siltstone_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SILTSTONE_BRICKS_PRESSURE_PLATE = REGISTRY.register("siltstone_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SILTSTONE_BUTTON = REGISTRY.register("siltstone_button", RankineStoneButton::new);
    public static final RegistryObject<Block> ITACOLUMITE = REGISTRY.register("itacolumite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ITACOLUMITE = REGISTRY.register("polished_itacolumite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_BRICKS = REGISTRY.register("itacolumite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_SLAB = REGISTRY.register("itacolumite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ITACOLUMITE_SLAB = REGISTRY.register("polished_itacolumite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_BRICKS_SLAB = REGISTRY.register("itacolumite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_STAIRS = REGISTRY.register("itacolumite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ITACOLUMITE_STAIRS = REGISTRY.register("polished_itacolumite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_BRICKS_STAIRS = REGISTRY.register("itacolumite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_WALL = REGISTRY.register("itacolumite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ITACOLUMITE_WALL = REGISTRY.register("polished_itacolumite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_BRICKS_WALL = REGISTRY.register("itacolumite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_VERTICAL_SLAB = REGISTRY.register("itacolumite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ITACOLUMITE_VERTICAL_SLAB = REGISTRY.register("polished_itacolumite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("itacolumite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ITACOLUMITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ITACOLUMITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ITACOLUMITE_HL.get())));
    public static final RegistryObject<Block> ITACOLUMITE_PRESSURE_PLATE = REGISTRY.register("itacolumite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> ITACOLUMITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("itacolumite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> ITACOLUMITE_BUTTON = REGISTRY.register("itacolumite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> ARKOSE = REGISTRY.register("arkose", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ARKOSE = REGISTRY.register("polished_arkose", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_BRICKS = REGISTRY.register("arkose_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_SLAB = REGISTRY.register("arkose_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ARKOSE_SLAB = REGISTRY.register("polished_arkose_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_BRICKS_SLAB = REGISTRY.register("arkose_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_STAIRS = REGISTRY.register("arkose_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ARKOSE_STAIRS = REGISTRY.register("polished_arkose_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_BRICKS_STAIRS = REGISTRY.register("arkose_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_WALL = REGISTRY.register("arkose_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ARKOSE_WALL = REGISTRY.register("polished_arkose_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_BRICKS_WALL = REGISTRY.register("arkose_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_VERTICAL_SLAB = REGISTRY.register("arkose_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> POLISHED_ARKOSE_VERTICAL_SLAB = REGISTRY.register("polished_arkose_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_BRICKS_VERTICAL_SLAB = REGISTRY.register("arkose_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.ARKOSE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.ARKOSE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.ARKOSE_HL.get())));
    public static final RegistryObject<Block> ARKOSE_PRESSURE_PLATE = REGISTRY.register("arkose_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> ARKOSE_BRICKS_PRESSURE_PLATE = REGISTRY.register("arkose_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> ARKOSE_BUTTON = REGISTRY.register("arkose_button", RankineStoneButton::new);
    public static final RegistryObject<Block> MUDSTONE = REGISTRY.register("mudstone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MUDSTONE = REGISTRY.register("polished_mudstone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_BRICKS = REGISTRY.register("mudstone_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_SLAB = REGISTRY.register("mudstone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MUDSTONE_SLAB = REGISTRY.register("polished_mudstone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_BRICKS_SLAB = REGISTRY.register("mudstone_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_STAIRS = REGISTRY.register("mudstone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MUDSTONE_STAIRS = REGISTRY.register("polished_mudstone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_BRICKS_STAIRS = REGISTRY.register("mudstone_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_WALL = REGISTRY.register("mudstone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MUDSTONE_WALL = REGISTRY.register("polished_mudstone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_BRICKS_WALL = REGISTRY.register("mudstone_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_VERTICAL_SLAB = REGISTRY.register("mudstone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MUDSTONE_VERTICAL_SLAB = REGISTRY.register("polished_mudstone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_BRICKS_VERTICAL_SLAB = REGISTRY.register("mudstone_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MUDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MUDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MUDSTONE_HL.get())));
    public static final RegistryObject<Block> MUDSTONE_PRESSURE_PLATE = REGISTRY.register("mudstone_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> MUDSTONE_BRICKS_PRESSURE_PLATE = REGISTRY.register("mudstone_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> MUDSTONE_BUTTON = REGISTRY.register("mudstone_button", RankineStoneButton::new);
    public static final RegistryObject<Block> BRECCIA = REGISTRY.register("breccia", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_BRECCIA = REGISTRY.register("polished_breccia", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_BRICKS = REGISTRY.register("breccia_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_SLAB = REGISTRY.register("breccia_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_BRECCIA_SLAB = REGISTRY.register("polished_breccia_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_BRICKS_SLAB = REGISTRY.register("breccia_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_STAIRS = REGISTRY.register("breccia_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_BRECCIA_STAIRS = REGISTRY.register("polished_breccia_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_BRICKS_STAIRS = REGISTRY.register("breccia_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_WALL = REGISTRY.register("breccia_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_BRECCIA_WALL = REGISTRY.register("polished_breccia_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_BRICKS_WALL = REGISTRY.register("breccia_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_VERTICAL_SLAB = REGISTRY.register("breccia_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> POLISHED_BRECCIA_VERTICAL_SLAB = REGISTRY.register("polished_breccia_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_BRICKS_VERTICAL_SLAB = REGISTRY.register("breccia_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.BRECCIA_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.BRECCIA_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.BRECCIA_HL.get())));
    public static final RegistryObject<Block> BRECCIA_PRESSURE_PLATE = REGISTRY.register("breccia_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> BRECCIA_BRICKS_PRESSURE_PLATE = REGISTRY.register("breccia_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> BRECCIA_BUTTON = REGISTRY.register("breccia_button", RankineStoneButton::new);
    public static final RegistryObject<Block> SERPENTINITE = REGISTRY.register("serpentinite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SERPENTINITE = REGISTRY.register("polished_serpentinite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_BRICKS = REGISTRY.register("serpentinite_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_SLAB = REGISTRY.register("serpentinite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SERPENTINITE_SLAB = REGISTRY.register("polished_serpentinite_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_BRICKS_SLAB = REGISTRY.register("serpentinite_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_STAIRS = REGISTRY.register("serpentinite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SERPENTINITE_STAIRS = REGISTRY.register("polished_serpentinite_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_BRICKS_STAIRS = REGISTRY.register("serpentinite_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_WALL = REGISTRY.register("serpentinite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SERPENTINITE_WALL = REGISTRY.register("polished_serpentinite_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_BRICKS_WALL = REGISTRY.register("serpentinite_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_VERTICAL_SLAB = REGISTRY.register("serpentinite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SERPENTINITE_VERTICAL_SLAB = REGISTRY.register("polished_serpentinite_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_BRICKS_VERTICAL_SLAB = REGISTRY.register("serpentinite_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SERPENTINITE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SERPENTINITE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SERPENTINITE_HL.get())));
    public static final RegistryObject<Block> SERPENTINITE_PRESSURE_PLATE = REGISTRY.register("serpentinite_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SERPENTINITE_BRICKS_PRESSURE_PLATE = REGISTRY.register("serpentinite_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SERPENTINITE_BUTTON = REGISTRY.register("serpentinite_button", RankineStoneButton::new);
    public static final RegistryObject<Block> SOUL_SANDSTONE = REGISTRY.register("soul_sandstone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SOUL_SANDSTONE = REGISTRY.register("polished_soul_sandstone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_BRICKS = REGISTRY.register("soul_sandstone_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_SLAB = REGISTRY.register("soul_sandstone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SOUL_SANDSTONE_SLAB = REGISTRY.register("polished_soul_sandstone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_BRICKS_SLAB = REGISTRY.register("soul_sandstone_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_STAIRS = REGISTRY.register("soul_sandstone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SOUL_SANDSTONE_STAIRS = REGISTRY.register("polished_soul_sandstone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_BRICKS_STAIRS = REGISTRY.register("soul_sandstone_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_WALL = REGISTRY.register("soul_sandstone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SOUL_SANDSTONE_WALL = REGISTRY.register("polished_soul_sandstone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_BRICKS_WALL = REGISTRY.register("soul_sandstone_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_VERTICAL_SLAB = REGISTRY.register("soul_sandstone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_SOUL_SANDSTONE_VERTICAL_SLAB = REGISTRY.register("polished_soul_sandstone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_BRICKS_VERTICAL_SLAB = REGISTRY.register("soul_sandstone_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.SOUL_SANDSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.SOUL_SANDSTONE_HL.get())));
    public static final RegistryObject<Block> SOUL_SANDSTONE_PRESSURE_PLATE = REGISTRY.register("soul_sandstone_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SOUL_SANDSTONE_BRICKS_PRESSURE_PLATE = REGISTRY.register("soul_sandstone_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> SOUL_SANDSTONE_BUTTON = REGISTRY.register("soul_sandstone_button", RankineStoneButton::new);
    public static final RegistryObject<Block> MARLSTONE = REGISTRY.register("marlstone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARLSTONE = REGISTRY.register("polished_marlstone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_BRICKS = REGISTRY.register("marlstone_bricks", () -> new RankineStoneBricksBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_SLAB = REGISTRY.register("marlstone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARLSTONE_SLAB = REGISTRY.register("polished_marlstone_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_BRICKS_SLAB = REGISTRY.register("marlstone_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_STAIRS = REGISTRY.register("marlstone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARLSTONE_STAIRS = REGISTRY.register("polished_marlstone_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_BRICKS_STAIRS = REGISTRY.register("marlstone_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0), Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_WALL = REGISTRY.register("marlstone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARLSTONE_WALL = REGISTRY.register("polished_marlstone_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_BRICKS_WALL = REGISTRY.register("marlstone_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_VERTICAL_SLAB = REGISTRY.register("marlstone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> POLISHED_MARLSTONE_VERTICAL_SLAB = REGISTRY.register("polished_marlstone_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_BRICKS_VERTICAL_SLAB = REGISTRY.register("marlstone_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(Config.STONE_PROPERTIES.MARLSTONE_HARD.get().floatValue()*Config.GENERAL.BRICKS_HARDNESS_MULT.get().floatValue(), Config.STONE_PROPERTIES.MARLSTONE_RESIST.get().floatValue()*Config.GENERAL.BRICKS_RESISTANCE_MULT.get().floatValue()).harvestLevel(Config.STONE_PROPERTIES.MARLSTONE_HL.get())));
    public static final RegistryObject<Block> MARLSTONE_PRESSURE_PLATE = REGISTRY.register("marlstone_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> MARLSTONE_BRICKS_PRESSURE_PLATE = REGISTRY.register("marlstone_bricks_pressure_plate", RankineStonePressurePlate::new);
    public static final RegistryObject<Block> MARLSTONE_BUTTON = REGISTRY.register("marlstone_button", RankineStoneButton::new);

    //wierd mineral blocks
    //public static final RegistryObject<Block> MELLITE_BLOCK = REGISTRY.register("mellite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> MELLITE_STONE = REGISTRY.register("mellite_stone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    //public static final RegistryObject<Block> RINGWOODITE_BLOCK = REGISTRY.register("ringwoodite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> RINGWOODITE_STONE = REGISTRY.register("ringwoodite_stone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    //public static final RegistryObject<Block> WADSLEYITE_BLOCK = REGISTRY.register("wadsleyite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> WADSLEYITE_STONE = REGISTRY.register("wadsleyite_stone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    //public static final RegistryObject<Block> FORSTERITE_BLOCK = REGISTRY.register("forsterite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> FORSTERITE_STONE = REGISTRY.register("forsterite_stone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    //public static final RegistryObject<Block> SPINEL_BLOCK = REGISTRY.register("spinel_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> SPINEL_STONE = REGISTRY.register("spinel_stone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    //public static final RegistryObject<Block> BRIDGMANITE_BLOCK = REGISTRY.register("bridgmanite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BRIDGMANITE_STONE = REGISTRY.register("bridgmanite_stone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    //public static final RegistryObject<Block> FERROPERICLASE_BLOCK = REGISTRY.register("ferropericlase_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> FERROPERICLASE_STONE = REGISTRY.register("ferropericlase_stone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    //public static final RegistryObject<Block> PEROVSKITE_BLOCK = REGISTRY.register("perovskite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PEROVSKITE_STONE = REGISTRY.register("perovskite_stone", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));



    public static final RegistryObject<Block> CLAY_BRICKS = REGISTRY.register("clay_bricks", () -> new Block(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> REFRACTORY_BRICKS = REGISTRY.register("refractory_bricks", () -> new Block(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> HIGH_REFRACTORY_BRICKS = REGISTRY.register("high_refractory_bricks", () -> new Block(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> ULTRA_HIGH_REFRACTORY_BRICKS = REGISTRY.register("ultra_high_refractory_bricks", () -> new Block(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> CLAY_BRICKS_WALL = REGISTRY.register("clay_bricks_wall", () -> new RankineWallBlock(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> REFRACTORY_BRICKS_WALL = REGISTRY.register("refractory_bricks_wall", () -> new RankineWallBlock(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> HIGH_REFRACTORY_BRICKS_WALL = REGISTRY.register("high_refractory_bricks_wall", () -> new RankineWallBlock(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> ULTRA_HIGH_REFRACTORY_BRICKS_WALL = REGISTRY.register("ultra_high_refractory_bricks_wall", () -> new RankineWallBlock(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> CLAY_BRICKS_SLAB = REGISTRY.register("clay_bricks_slab", () -> new RankineSlabBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> REFRACTORY_BRICKS_SLAB = REGISTRY.register("refractory_bricks_slab", () -> new RankineSlabBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> HIGH_REFRACTORY_BRICKS_SLAB = REGISTRY.register("high_refractory_bricks_slab", () -> new RankineSlabBlock(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> ULTRA_HIGH_REFRACTORY_BRICKS_SLAB = REGISTRY.register("ultra_high_refractory_bricks_slab", () -> new RankineSlabBlock(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> CLAY_BRICKS_STAIRS = REGISTRY.register("clay_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0),DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> REFRACTORY_BRICKS_STAIRS = REGISTRY.register("refractory_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0),DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> HIGH_REFRACTORY_BRICKS_STAIRS = REGISTRY.register("high_refractory_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0),DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> ULTRA_HIGH_REFRACTORY_BRICKS_STAIRS = REGISTRY.register("ultra_high_refractory_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0),DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> CLAY_BRICKS_VERTICAL_SLAB = REGISTRY.register("clay_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> REFRACTORY_BRICKS_VERTICAL_SLAB = REGISTRY.register("refractory_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> HIGH_REFRACTORY_BRICKS_VERTICAL_SLAB = REGISTRY.register("high_refractory_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> ULTRA_HIGH_REFRACTORY_BRICKS_VERTICAL_SLAB = REGISTRY.register("ultra_high_refractory_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_STONE.harvestLevel(1)));


    public static final RegistryObject<Block> FIBER_BLOCK = REGISTRY.register("fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> FIBER_BLOCK_SLAB = REGISTRY.register("fiber_block_slab", () -> new RankineSlabBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> FIBER_BLOCK_STAIRS = REGISTRY.register("fiber_block_stairs", () -> new RankineStairsBlock(Block.getStateById(0),AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> FIBER_BLOCK_VERTICAL_SLAB = REGISTRY.register("fiber_block_vertical_slab", () -> new RankineVerticalSlabBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> FIBER_BLOCK_WALL = REGISTRY.register("fiber_block_wall", () -> new RankineWallBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> WHITE_FIBER_BLOCK = REGISTRY.register("white_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> ORANGE_FIBER_BLOCK = REGISTRY.register("orange_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> MAGENTA_FIBER_BLOCK = REGISTRY.register("magenta_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> LIGHT_BLUE_FIBER_BLOCK = REGISTRY.register("light_blue_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> YELLOW_FIBER_BLOCK = REGISTRY.register("yellow_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> LIME_FIBER_BLOCK = REGISTRY.register("lime_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> PINK_FIBER_BLOCK = REGISTRY.register("pink_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> GRAY_FIBER_BLOCK = REGISTRY.register("gray_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> LIGHT_GRAY_FIBER_BLOCK = REGISTRY.register("light_gray_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> CYAN_FIBER_BLOCK = REGISTRY.register("cyan_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> PURPLE_FIBER_BLOCK = REGISTRY.register("purple_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> BLUE_FIBER_BLOCK = REGISTRY.register("blue_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> GREEN_FIBER_BLOCK = REGISTRY.register("green_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> BROWN_FIBER_BLOCK = REGISTRY.register("brown_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> RED_FIBER_BLOCK = REGISTRY.register("red_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> BLACK_FIBER_BLOCK = REGISTRY.register("black_fiber_block", () -> new FiberBlock(AbstractBlock.Properties.create(Material.WOOL, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> FIBER_MAT = REGISTRY.register("fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> WHITE_FIBER_MAT = REGISTRY.register("white_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> ORANGE_FIBER_MAT = REGISTRY.register("orange_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> MAGENTA_FIBER_MAT = REGISTRY.register("magenta_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> LIGHT_BLUE_FIBER_MAT = REGISTRY.register("light_blue_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> YELLOW_FIBER_MAT = REGISTRY.register("yellow_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> LIME_FIBER_MAT = REGISTRY.register("lime_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> PINK_FIBER_MAT = REGISTRY.register("pink_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> GRAY_FIBER_MAT = REGISTRY.register("gray_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> LIGHT_GRAY_FIBER_MAT = REGISTRY.register("light_gray_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> CYAN_FIBER_MAT = REGISTRY.register("cyan_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> PURPLE_FIBER_MAT = REGISTRY.register("purple_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> BLUE_FIBER_MAT = REGISTRY.register("blue_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> GREEN_FIBER_MAT = REGISTRY.register("green_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> BROWN_FIBER_MAT = REGISTRY.register("brown_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> RED_FIBER_MAT = REGISTRY.register("red_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> BLACK_FIBER_MAT = REGISTRY.register("black_fiber_mat", () -> new FiberMatBlock(AbstractBlock.Properties.create(Material.CARPET, MaterialColor.SNOW).hardnessAndResistance(0.1F).sound(SoundType.CLOTH)));


    public static final RegistryObject<Block> PACKED_SNOW = REGISTRY.register("packed_snow", () -> new Block(AbstractBlock.Properties.create(Material.SNOW_BLOCK).hardnessAndResistance(2.0F).setRequiresTool().harvestTool(ToolType.SHOVEL).sound(SoundType.SNOW)));
    public static final RegistryObject<Block> METEORIC_ICE = REGISTRY.register("meteoric_ice", () -> new BreakableBlock(AbstractBlock.Properties.create(Material.PACKED_ICE).hardnessAndResistance(3.5F).slipperiness(1.1F).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> DIAMOND_GEODE = REGISTRY.register("diamond_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> EMERALD_GEODE = REGISTRY.register("emerald_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> AQUAMARINE_GEODE = REGISTRY.register("aquamarine_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> OPAL_GEODE = REGISTRY.register("opal_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> RUBY_GEODE = REGISTRY.register("ruby_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> SAPPHIRE_GEODE = REGISTRY.register("sapphire_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> PERIDOT_GEODE = REGISTRY.register("peridot_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> GARNET_GEODE = REGISTRY.register("garnet_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> TOPAZ_GEODE = REGISTRY.register("topaz_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));
    public static final RegistryObject<Block> TOURMALINE_GEODE = REGISTRY.register("tourmaline_geode", () -> new GeodeBlock(DEF_STONE.harvestLevel(0)));

    public static final RegistryObject<Block> TRAMPOLINE = REGISTRY.register("trampoline", () -> new TrampolineBlock(AbstractBlock.Properties.create(Material.CLAY, MaterialColor.BLACK).slipperiness(0.8F).hardnessAndResistance(1.0F, 2.0F).notSolid().sound(SoundType.SLIME)));
    public static final RegistryObject<Block> GAS_VENT = REGISTRY.register("gas_vent", () -> new GasVentBlock(GasUtilsEnum.SET,DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> HYDROGEN_GAS_BLOCK = REGISTRY.register("hydrogen_gas_block", () -> new GasBlock(GasUtilsEnum.HYDROGEN,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> HELIUM_GAS_BLOCK = REGISTRY.register("helium_gas_block", () -> new GasBlock(GasUtilsEnum.HELIUM,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> NITROGEN_GAS_BLOCK = REGISTRY.register("nitrogen_gas_block", () -> new GasBlock(GasUtilsEnum.NITROGEN,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> OXYGEN_GAS_BLOCK = REGISTRY.register("oxygen_gas_block", () -> new GasBlock(GasUtilsEnum.OXYGEN,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> FLUORINE_GAS_BLOCK = REGISTRY.register("fluorine_gas_block", () -> new GasBlock(GasUtilsEnum.FLUORINE,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> NEON_GAS_BLOCK = REGISTRY.register("neon_gas_block", () -> new GasBlock(GasUtilsEnum.NEON,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> CHLORINE_GAS_BLOCK = REGISTRY.register("chlorine_gas_block", () -> new GasBlock(GasUtilsEnum.CHLORINE,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> ARGON_GAS_BLOCK = REGISTRY.register("argon_gas_block", () -> new GasBlock(GasUtilsEnum.ARGON,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> KRYPTON_GAS_BLOCK = REGISTRY.register("krypton_gas_block", () -> new GasBlock(GasUtilsEnum.KRYPTON,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> XENON_GAS_BLOCK = REGISTRY.register("xenon_gas_block", () -> new GasBlock(GasUtilsEnum.XENON,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> RADON_GAS_BLOCK = REGISTRY.register("radon_gas_block", () -> new GasBlock(GasUtilsEnum.RADON,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));
    public static final RegistryObject<Block> OGANESSON_GAS_BLOCK = REGISTRY.register("oganesson_gas_block", () -> new GasBlock(GasUtilsEnum.OGANESSON,AbstractBlock.Properties.create(Material.AIR).doesNotBlockMovement().noDrops().setAir()));





    public static final RegistryObject<Block> SILT = REGISTRY.register("silt", () -> new SandBlock(00000000, Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.SAND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> LOAM = REGISTRY.register("loam", () -> new SoilBlock(Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> SILTY_LOAM = REGISTRY.register("silty_loam", () -> new SoilBlock(Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.SAND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> LOAMY_SAND = REGISTRY.register("loamy_sand", () -> new SoilBlock(Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.SAND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> SANDY_LOAM = REGISTRY.register("sandy_loam", () -> new SoilBlock(Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.SAND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> CLAY_LOAM = REGISTRY.register("clay_loam", () -> new SoilBlock(Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> SANDY_CLAY_LOAM = REGISTRY.register("sandy_clay_loam", () -> new SoilBlock(Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> SILTY_CLAY_LOAM = REGISTRY.register("silty_clay_loam", () -> new SoilBlock(Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> SANDY_CLAY = REGISTRY.register("sandy_clay", () -> new SoilBlock(Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> SILTY_CLAY = REGISTRY.register("silty_clay", () -> new SoilBlock(Block.Properties.create(Material.EARTH, MaterialColor.DIRT).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> GRASSY_LOAM = REGISTRY.register("grassy_loam", () -> new GrassySoilBlock(AbstractBlock.Properties.create(Material.ORGANIC).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.PLANT).harvestTool(ToolType.SHOVEL)));
    public static final RegistryObject<Block> GRASSY_SILTY_LOAM = REGISTRY.register("grassy_silty_loam", () -> new GrassySoilBlock(AbstractBlock.Properties.create(Material.ORGANIC).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.PLANT).harvestTool(ToolType.SHOVEL)));
    public static final RegistryObject<Block> GRASSY_LOAMY_SAND = REGISTRY.register("grassy_loamy_sand", () -> new GrassySoilBlock(AbstractBlock.Properties.create(Material.ORGANIC).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.PLANT).harvestTool(ToolType.SHOVEL)));
    public static final RegistryObject<Block> GRASSY_SANDY_LOAM = REGISTRY.register("grassy_sandy_loam", () -> new GrassySoilBlock(AbstractBlock.Properties.create(Material.ORGANIC).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.PLANT).harvestTool(ToolType.SHOVEL)));
    public static final RegistryObject<Block> GRASSY_CLAY_LOAM = REGISTRY.register("grassy_clay_loam", () -> new GrassySoilBlock(AbstractBlock.Properties.create(Material.ORGANIC).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.PLANT).harvestTool(ToolType.SHOVEL)));
    public static final RegistryObject<Block> GRASSY_SANDY_CLAY_LOAM = REGISTRY.register("grassy_sandy_clay_loam", () -> new GrassySoilBlock(AbstractBlock.Properties.create(Material.ORGANIC).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.PLANT).harvestTool(ToolType.SHOVEL)));
    public static final RegistryObject<Block> GRASSY_SILTY_CLAY_LOAM = REGISTRY.register("grassy_silty_clay_loam", () -> new GrassySoilBlock(AbstractBlock.Properties.create(Material.ORGANIC).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.PLANT).harvestTool(ToolType.SHOVEL)));
    public static final RegistryObject<Block> GRASSY_SANDY_CLAY = REGISTRY.register("grassy_sandy_clay", () -> new GrassySoilBlock(AbstractBlock.Properties.create(Material.ORGANIC).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.PLANT).harvestTool(ToolType.SHOVEL)));
    public static final RegistryObject<Block> GRASSY_SILTY_CLAY = REGISTRY.register("grassy_silty_clay", () -> new GrassySoilBlock(AbstractBlock.Properties.create(Material.ORGANIC).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.PLANT).harvestTool(ToolType.SHOVEL)));
    public static final RegistryObject<Block> GRASSY_LOAM_PATH = REGISTRY.register("grassy_loam_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> GRASSY_SILTY_LOAM_PATH = REGISTRY.register("grassy_silty_loam_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> GRASSY_LOAMY_SAND_PATH = REGISTRY.register("grassy_loamy_sand_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> GRASSY_SANDY_LOAM_PATH = REGISTRY.register("grassy_sandy_loam_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> GRASSY_CLAY_LOAM_PATH = REGISTRY.register("grassy_clay_loam_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> GRASSY_SANDY_CLAY_LOAM_PATH = REGISTRY.register("grassy_sandy_clay_loam_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> GRASSY_SILTY_CLAY_LOAM_PATH = REGISTRY.register("grassy_silty_clay_loam_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> GRASSY_SANDY_CLAY_PATH = REGISTRY.register("grassy_sandy_clay_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> GRASSY_SILTY_CLAY_PATH = REGISTRY.register("grassy_silty_clay_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> MYCELIUM_PATH = REGISTRY.register("mycelium_path", () -> new GrassPathBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    //gravel path?
    //
    public static final RegistryObject<Block> END_GRASS_BLOCK = REGISTRY.register("end_grass_block", () -> new GrassySoilBlock(Block.Properties.create(Material.EARTH).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> END_SOIL = REGISTRY.register("end_soil", () -> new Block(AbstractBlock.Properties.create(Material.EARTH, MaterialColor.DIRT).hardnessAndResistance(0.5F).sound(SoundType.GROUND)));
    public static final RegistryObject<Block> TILLED_SOIL = REGISTRY.register("tilled_soil", () -> new TilledSoilBlock(AbstractBlock.Properties.create(Material.EARTH, MaterialColor.DIRT).hardnessAndResistance(0.5F).sound(SoundType.GROUND)));
    public static final RegistryObject<Block> LIGHTNING_GLASS = REGISTRY.register("lightning_glass", () -> new Block(AbstractBlock.Properties.create(Material.EARTH, MaterialColor.DIRT).hardnessAndResistance(0.5F).sound(SoundType.GROUND)));


    public static final RegistryObject<Block> ALLUVIUM = REGISTRY.register("alluvium", () -> new SandBlock(14406560, AbstractBlock.Properties.create(Material.SAND, MaterialColor.SAND).hardnessAndResistance(0.5F).sound(SoundType.SAND)));
    public static final RegistryObject<Block> BLACK_SAND = REGISTRY.register("black_sand", () -> new SandBlock(00000000, AbstractBlock.Properties.create(Material.SAND, MaterialColor.SAND).hardnessAndResistance(0.5F).sound(SoundType.SAND)));
    public static final RegistryObject<Block> WHITE_SAND = REGISTRY.register("white_sand", () -> new SandBlock(16777215, AbstractBlock.Properties.create(Material.SAND, MaterialColor.SAND).hardnessAndResistance(0.5F).sound(SoundType.SAND)));
    public static final RegistryObject<Block> LEAD_GLASS = REGISTRY.register("lead_glass", () -> new GlassBlock(Block.Properties.create(Material.GLASS).hardnessAndResistance(6.0F,30.0F).sound(SoundType.GLASS).notSolid().harvestLevel(2)));
    public static final RegistryObject<Block> PHOSPHORITE = REGISTRY.register("phosphorite", () -> new Block(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> IRONSTONE = REGISTRY.register("ironstone", () -> new Block(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> QUICKLIME_BLOCK = REGISTRY.register("quicklime_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).hardnessAndResistance(2.0F, 2.0F).harvestLevel(0).harvestTool(ToolType.PICKAXE)));
    public static final RegistryObject<Block> MAGNESITE_BLOCK = REGISTRY.register("magnesite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).hardnessAndResistance(2.0F, 2.0F).harvestLevel(0).harvestTool(ToolType.PICKAXE)));
    public static final RegistryObject<Block> MAGNESIA_BLOCK = REGISTRY.register("magnesia_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).hardnessAndResistance(2.0F, 2.0F).harvestLevel(0).harvestTool(ToolType.PICKAXE)));
    public static final RegistryObject<Block> ANDESITIC_TUFF = REGISTRY.register("andesitic_tuff", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).hardnessAndResistance(2.0F, 2.0F).harvestLevel(Config.STONE_PROPERTIES.HORNBLENDE_ANDESITE_HL.get()).harvestTool(ToolType.PICKAXE)));
    public static final RegistryObject<Block> BASALTIC_TUFF = REGISTRY.register("basaltic_tuff", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).hardnessAndResistance(2.0F, 2.0F).harvestLevel(Config.STONE_PROPERTIES.THOLEIITIC_BASALT_HL.get()).harvestTool(ToolType.PICKAXE)));
    public static final RegistryObject<Block> RHYOLITIC_TUFF = REGISTRY.register("rhyolitic_tuff", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).hardnessAndResistance(2.0F, 2.0F).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get()).harvestTool(ToolType.PICKAXE)));
    public static final RegistryObject<Block> DACITIC_TUFF = REGISTRY.register("dacitic_tuff", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).hardnessAndResistance(2.0F, 2.0F).harvestLevel(Config.STONE_PROPERTIES.RHYOLITE_HL.get()).harvestTool(ToolType.PICKAXE)));
    public static final RegistryObject<Block> UNCOLORED_CONCRETE = REGISTRY.register("uncolored_concrete", () -> new Block(Block.Properties.create(Material.ROCK).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2).harvestLevel(1)));
    public static final RegistryObject<Block> UNCOLORED_CONCRETE_SLAB = REGISTRY.register("uncolored_concrete_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(1)));
    public static final RegistryObject<Block> UNCOLORED_CONCRETE_STAIRS = REGISTRY.register("uncolored_concrete_stairs", () -> new RankineStairsBlock(Block.getStateById(0),Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(1)));
    public static final RegistryObject<Block> UNCOLORED_CONCRETE_VERTICAL_SLAB = REGISTRY.register("uncolored_concrete_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(1)));
    public static final RegistryObject<Block> UNCOLORED_CONCRETE_WALL = REGISTRY.register("uncolored_concrete_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(1)));
    public static final RegistryObject<Block> GRAVEL_CONCRETE = REGISTRY.register("gravel_concrete", () -> new Block(Block.Properties.create(Material.ROCK).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2).harvestLevel(1)));
    public static final RegistryObject<Block> ROMAN_CONCRETE = REGISTRY.register("roman_concrete", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ROMAN_CONCRETE_SLAB = REGISTRY.register("roman_concrete_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ROMAN_CONCRETE_STAIRS = REGISTRY.register("roman_concrete_stairs", () -> new RankineStairsBlock(Block.getStateById(0),Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ROMAN_CONCRETE_VERTICAL_SLAB = REGISTRY.register("roman_concrete_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(1)));
    public static final RegistryObject<Block> ROMAN_CONCRETE_WALL = REGISTRY.register("roman_concrete_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> POLISHED_ROMAN_CONCRETE = REGISTRY.register("polished_roman_concrete", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> POLISHED_ROMAN_CONCRETE_SLAB = REGISTRY.register("polished_roman_concrete_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> POLISHED_ROMAN_CONCRETE_STAIRS = REGISTRY.register("polished_roman_concrete_stairs", () -> new RankineStairsBlock(Block.getStateById(0),Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> POLISHED_ROMAN_CONCRETE_VERTICAL_SLAB = REGISTRY.register("polished_roman_concrete_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(1)));
    public static final RegistryObject<Block> POLISHED_ROMAN_CONCRETE_WALL = REGISTRY.register("polished_roman_concrete_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ROMAN_CONCRETE_BRICKS = REGISTRY.register("roman_concrete_bricks", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ROMAN_CONCRETE_BRICKS_SLAB = REGISTRY.register("roman_concrete_bricks_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ROMAN_CONCRETE_BRICKS_STAIRS = REGISTRY.register("roman_concrete_bricks_stairs", () -> new RankineStairsBlock(Block.getStateById(0),Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ROMAN_CONCRETE_BRICKS_VERTICAL_SLAB = REGISTRY.register("roman_concrete_bricks_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(1)));
    public static final RegistryObject<Block> ROMAN_CONCRETE_BRICKS_WALL = REGISTRY.register("roman_concrete_bricks_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> QUARRY_BARRIER = REGISTRY.register("quarry_barrier", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).hardnessAndResistance(5.0F, 20.0F).harvestLevel(0).harvestTool(ToolType.PICKAXE)));
    public static final RegistryObject<Block> BONE_CHAR_BLOCK = REGISTRY.register("bone_char_block", () -> new RotatedPillarBlock(Block.Properties.create(Material.ROCK).sound(SoundType.BONE).hardnessAndResistance(2.0F).harvestLevel(0).harvestTool(ToolType.PICKAXE)));
    public static final RegistryObject<Block> FIRE_CLAY = REGISTRY.register("fire_clay", () -> new Block(Block.Properties.create(Material.CLAY).sound(SoundType.GROUND).harvestTool(ToolType.SHOVEL).hardnessAndResistance(1.0F, 3.0F).harvestLevel(0)));
    public static final RegistryObject<Block> KAOLINITE_BLOCK = REGISTRY.register("kaolinite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.0F, 3.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PORCELAIN_BLOCK = REGISTRY.register("porcelain_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.0F, 3.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CHECKERED_MARBLE = REGISTRY.register("checkered_marble", () -> new Block(Block.Properties.create(Material.ROCK).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2)));
    public static final RegistryObject<Block> CHECKERED_MARBLE_SLAB = REGISTRY.register("checkered_marble_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2)));
    public static final RegistryObject<Block> CHECKERED_MARBLE_STAIRS = REGISTRY.register("checkered_marble_stairs", () -> new RankineStairsBlock(Block.getStateById(0),Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2)));
    public static final RegistryObject<Block> CHECKERED_MARBLE_VERTICAL_SLAB = REGISTRY.register("checkered_marble_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2)));
    public static final RegistryObject<Block> CHECKERED_MARBLE_WALL = REGISTRY.register("checkered_marble_wall", () -> new RankineWallBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(1.5F, 6.0F).harvestLevel(0)));

    public static final RegistryObject<Block> ASPHALT = REGISTRY.register("asphalt", () -> new AsphaltBlock(Block.Properties.create(Material.ROCK).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2).harvestLevel(0)));
    public static final RegistryObject<Block> WORN_ASPHALT = REGISTRY.register("worn_asphalt", () -> new WornAsphaltBlock(Block.Properties.create(Material.ROCK).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2).harvestLevel(0)));
    public static final RegistryObject<Block> WEATHERED_ASPHALT = REGISTRY.register("weathered_asphalt", () -> new WeatheredAsphaltBlock(Block.Properties.create(Material.ROCK).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2).harvestLevel(0)));
    public static final RegistryObject<Block> CRACKED_ASPHALT = REGISTRY.register("cracked_asphalt", () -> new CrackedAsphaltBlock(Block.Properties.create(Material.ROCK).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2).harvestLevel(0)));
    public static final RegistryObject<Block> POTHOLE = REGISTRY.register("pothole", () -> new PotholeBlock(Block.Properties.create(Material.ROCK).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2).harvestLevel(0)));
    //public static final RegistryObject<Block> MANHOLE = REGISTRY.register("manhole", () -> new ManholeBlock(Block.Properties.create(Material.ROCK).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2).harvestLevel(0)));


    public static final RegistryObject<Block> STICK_BLOCK = REGISTRY.register("stick_block", () -> new StickBlock(Block.Properties.create(Material.WOOD).sound(SoundType.WOOD).hardnessAndResistance(1.2F)));
    public static final RegistryObject<Block> CHARCOAL_BLOCK = REGISTRY.register("charcoal_block", () -> new CharcoalLayerBlock(Block.Properties.create(Material.WOOD).sound(SoundType.WOOD).hardnessAndResistance(0.25F)));
    public static final RegistryObject<Block> SAWDUST = REGISTRY.register("sawdust", () -> new RankineEightLayerBlock(Block.Properties.create(Material.WOOD).sound(SoundType.WOOD).hardnessAndResistance(0.25F)));
    public static final RegistryObject<Block> ASH = REGISTRY.register("ash", () -> new RankineEightLayerBlock(Block.Properties.create(Material.CLAY).sound(SoundType.GROUND).hardnessAndResistance(0.25F)));
    public static final RegistryObject<Block> BONE_ASH = REGISTRY.register("bone_ash", () -> new RankineEightLayerBlock(Block.Properties.create(Material.CLAY).sound(SoundType.GROUND).hardnessAndResistance(0.25F)));
    public static final RegistryObject<Block> MINERAL_WOOL = REGISTRY.register("mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> WHITE_MINERAL_WOOL = REGISTRY.register("white_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> ORANGE_MINERAL_WOOL = REGISTRY.register("orange_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> MAGENTA_MINERAL_WOOL = REGISTRY.register("magenta_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> LIGHT_BLUE_MINERAL_WOOL = REGISTRY.register("light_blue_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> YELLOW_MINERAL_WOOL = REGISTRY.register("yellow_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> LIME_MINERAL_WOOL = REGISTRY.register("lime_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> PINK_MINERAL_WOOL = REGISTRY.register("pink_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> GRAY_MINERAL_WOOL = REGISTRY.register("gray_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> LIGHT_GRAY_MINERAL_WOOL = REGISTRY.register("light_gray_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> CYAN_MINERAL_WOOL = REGISTRY.register("cyan_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> PURPLE_MINERAL_WOOL = REGISTRY.register("purple_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> BLUE_MINERAL_WOOL = REGISTRY.register("blue_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> GREEN_MINERAL_WOOL = REGISTRY.register("green_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> BROWN_MINERAL_WOOL = REGISTRY.register("brown_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> RED_MINERAL_WOOL = REGISTRY.register("red_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> BLACK_MINERAL_WOOL = REGISTRY.register("black_mineral_wool", () -> new MineralWoolBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));
    public static final RegistryObject<Block> GUN_COTTON = REGISTRY.register("gun_cotton", () -> new GunCottonBlock(Block.Properties.create(Material.WOOL, MaterialColor.ADOBE).sound(SoundType.CLOTH).hardnessAndResistance(1F)));

    //WOOD BLOCKS
    public static final RegistryObject<Block> BAMBOO_PLANKS = REGISTRY.register("bamboo_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_SLAB = REGISTRY.register("bamboo_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_STAIRS = REGISTRY.register("bamboo_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_VERTICAL_SLAB = REGISTRY.register("bamboo_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_FENCE = REGISTRY.register("bamboo_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_FENCE_GATE = REGISTRY.register("bamboo_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_PRESSURE_PLATE = REGISTRY.register("bamboo_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> BAMBOO_DOOR = REGISTRY.register("bamboo_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> BAMBOO_TRAPDOOR = REGISTRY.register("bamboo_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> BAMBOO_BUTTON = REGISTRY.register("bamboo_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> BAMBOO_CULMS = REGISTRY.register("bamboo_culms", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_CULMS_SLAB = REGISTRY.register("bamboo_culms_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_CULMS_STAIRS = REGISTRY.register("bamboo_culms_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_CULMS_VERTICAL_SLAB = REGISTRY.register("bamboo_culms_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_CULMS_FENCE = REGISTRY.register("bamboo_culms_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_CULMS_FENCE_GATE = REGISTRY.register("bamboo_culms_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> BAMBOO_CULMS_PRESSURE_PLATE = REGISTRY.register("bamboo_culms_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> BAMBOO_CULMS_DOOR = REGISTRY.register("bamboo_culms_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> BAMBOO_CULMS_TRAPDOOR = REGISTRY.register("bamboo_culms_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> BAMBOO_CULMS_BUTTON = REGISTRY.register("bamboo_culms_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> CEDAR_LOG = REGISTRY.register("cedar_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> CEDAR_WOOD = REGISTRY.register("cedar_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_CEDAR_LOG = REGISTRY.register("stripped_cedar_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_CEDAR_WOOD = REGISTRY.register("stripped_cedar_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> CEDAR_PLANKS = REGISTRY.register("cedar_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> CEDAR_SLAB = REGISTRY.register("cedar_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> CEDAR_STAIRS = REGISTRY.register("cedar_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> CEDAR_VERTICAL_SLAB = REGISTRY.register("cedar_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> CEDAR_FENCE = REGISTRY.register("cedar_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> CEDAR_FENCE_GATE = REGISTRY.register("cedar_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> CEDAR_PRESSURE_PLATE = REGISTRY.register("cedar_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> CEDAR_DOOR = REGISTRY.register("cedar_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> CEDAR_TRAPDOOR = REGISTRY.register("cedar_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> CEDAR_BUTTON = REGISTRY.register("cedar_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> PINYON_PINE_LOG = REGISTRY.register("pinyon_pine_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> PINYON_PINE_WOOD = REGISTRY.register("pinyon_pine_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_PINYON_PINE_LOG = REGISTRY.register("stripped_pinyon_pine_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_PINYON_PINE_WOOD = REGISTRY.register("stripped_pinyon_pine_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> PINYON_PINE_PLANKS = REGISTRY.register("pinyon_pine_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> PINYON_PINE_SLAB = REGISTRY.register("pinyon_pine_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> PINYON_PINE_STAIRS = REGISTRY.register("pinyon_pine_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> PINYON_PINE_VERTICAL_SLAB = REGISTRY.register("pinyon_pine_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> PINYON_PINE_FENCE = REGISTRY.register("pinyon_pine_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> PINYON_PINE_FENCE_GATE = REGISTRY.register("pinyon_pine_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> PINYON_PINE_PRESSURE_PLATE = REGISTRY.register("pinyon_pine_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> PINYON_PINE_DOOR = REGISTRY.register("pinyon_pine_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> PINYON_PINE_TRAPDOOR = REGISTRY.register("pinyon_pine_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> PINYON_PINE_BUTTON = REGISTRY.register("pinyon_pine_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> JUNIPER_LOG = REGISTRY.register("juniper_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> JUNIPER_WOOD = REGISTRY.register("juniper_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_JUNIPER_LOG = REGISTRY.register("stripped_juniper_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_JUNIPER_WOOD = REGISTRY.register("stripped_juniper_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> JUNIPER_PLANKS = REGISTRY.register("juniper_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> JUNIPER_SLAB = REGISTRY.register("juniper_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> JUNIPER_STAIRS = REGISTRY.register("juniper_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> JUNIPER_VERTICAL_SLAB = REGISTRY.register("juniper_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> JUNIPER_FENCE = REGISTRY.register("juniper_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> JUNIPER_FENCE_GATE = REGISTRY.register("juniper_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> JUNIPER_PRESSURE_PLATE = REGISTRY.register("juniper_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> JUNIPER_DOOR = REGISTRY.register("juniper_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> JUNIPER_TRAPDOOR = REGISTRY.register("juniper_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> JUNIPER_BUTTON = REGISTRY.register("juniper_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> COCONUT_PALM_LOG = REGISTRY.register("coconut_palm_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> COCONUT_PALM_WOOD = REGISTRY.register("coconut_palm_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_COCONUT_PALM_LOG = REGISTRY.register("stripped_coconut_palm_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_COCONUT_PALM_WOOD = REGISTRY.register("stripped_coconut_palm_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> COCONUT_PALM_PLANKS = REGISTRY.register("coconut_palm_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> COCONUT_PALM_SLAB = REGISTRY.register("coconut_palm_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> COCONUT_PALM_STAIRS = REGISTRY.register("coconut_palm_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> COCONUT_PALM_VERTICAL_SLAB = REGISTRY.register("coconut_palm_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> COCONUT_PALM_FENCE = REGISTRY.register("coconut_palm_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> COCONUT_PALM_FENCE_GATE = REGISTRY.register("coconut_palm_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> COCONUT_PALM_PRESSURE_PLATE = REGISTRY.register("coconut_palm_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> COCONUT_PALM_DOOR = REGISTRY.register("coconut_palm_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> COCONUT_PALM_TRAPDOOR = REGISTRY.register("coconut_palm_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> COCONUT_PALM_BUTTON = REGISTRY.register("coconut_palm_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> BALSAM_FIR_LOG = REGISTRY.register("balsam_fir_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> BALSAM_FIR_WOOD = REGISTRY.register("balsam_fir_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_BALSAM_FIR_LOG = REGISTRY.register("stripped_balsam_fir_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_BALSAM_FIR_WOOD = REGISTRY.register("stripped_balsam_fir_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> BALSAM_FIR_PLANKS = REGISTRY.register("balsam_fir_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> BALSAM_FIR_SLAB = REGISTRY.register("balsam_fir_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BALSAM_FIR_STAIRS = REGISTRY.register("balsam_fir_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> BALSAM_FIR_VERTICAL_SLAB = REGISTRY.register("balsam_fir_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BALSAM_FIR_FENCE = REGISTRY.register("balsam_fir_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> BALSAM_FIR_FENCE_GATE = REGISTRY.register("balsam_fir_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> BALSAM_FIR_PRESSURE_PLATE = REGISTRY.register("balsam_fir_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> BALSAM_FIR_DOOR = REGISTRY.register("balsam_fir_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> BALSAM_FIR_TRAPDOOR = REGISTRY.register("balsam_fir_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> BALSAM_FIR_BUTTON = REGISTRY.register("balsam_fir_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> MAGNOLIA_LOG = REGISTRY.register("magnolia_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> MAGNOLIA_WOOD = REGISTRY.register("magnolia_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_MAGNOLIA_LOG = REGISTRY.register("stripped_magnolia_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_MAGNOLIA_WOOD = REGISTRY.register("stripped_magnolia_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> MAGNOLIA_PLANKS = REGISTRY.register("magnolia_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> MAGNOLIA_SLAB = REGISTRY.register("magnolia_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> MAGNOLIA_STAIRS = REGISTRY.register("magnolia_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> MAGNOLIA_VERTICAL_SLAB = REGISTRY.register("magnolia_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> MAGNOLIA_FENCE = REGISTRY.register("magnolia_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> MAGNOLIA_FENCE_GATE = REGISTRY.register("magnolia_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> MAGNOLIA_PRESSURE_PLATE = REGISTRY.register("magnolia_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> MAGNOLIA_DOOR = REGISTRY.register("magnolia_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> MAGNOLIA_TRAPDOOR = REGISTRY.register("magnolia_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> MAGNOLIA_BUTTON = REGISTRY.register("magnolia_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> EASTERN_HEMLOCK_LOG = REGISTRY.register("eastern_hemlock_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_WOOD = REGISTRY.register("eastern_hemlock_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_EASTERN_HEMLOCK_LOG = REGISTRY.register("stripped_eastern_hemlock_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_EASTERN_HEMLOCK_WOOD = REGISTRY.register("stripped_eastern_hemlock_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_PLANKS = REGISTRY.register("eastern_hemlock_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_SLAB = REGISTRY.register("eastern_hemlock_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_STAIRS = REGISTRY.register("eastern_hemlock_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_VERTICAL_SLAB = REGISTRY.register("eastern_hemlock_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_FENCE = REGISTRY.register("eastern_hemlock_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_FENCE_GATE = REGISTRY.register("eastern_hemlock_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_PRESSURE_PLATE = REGISTRY.register("eastern_hemlock_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> EASTERN_HEMLOCK_DOOR = REGISTRY.register("eastern_hemlock_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> EASTERN_HEMLOCK_TRAPDOOR = REGISTRY.register("eastern_hemlock_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> EASTERN_HEMLOCK_BUTTON = REGISTRY.register("eastern_hemlock_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> YELLOW_BIRCH_LOG = REGISTRY.register("yellow_birch_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> YELLOW_BIRCH_WOOD = REGISTRY.register("yellow_birch_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_YELLOW_BIRCH_LOG = REGISTRY.register("stripped_yellow_birch_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_YELLOW_BIRCH_WOOD = REGISTRY.register("stripped_yellow_birch_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> YELLOW_BIRCH_PLANKS = REGISTRY.register("yellow_birch_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> YELLOW_BIRCH_SLAB = REGISTRY.register("yellow_birch_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> YELLOW_BIRCH_STAIRS = REGISTRY.register("yellow_birch_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> YELLOW_BIRCH_VERTICAL_SLAB = REGISTRY.register("yellow_birch_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> YELLOW_BIRCH_FENCE = REGISTRY.register("yellow_birch_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> YELLOW_BIRCH_FENCE_GATE = REGISTRY.register("yellow_birch_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> YELLOW_BIRCH_PRESSURE_PLATE = REGISTRY.register("yellow_birch_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> YELLOW_BIRCH_DOOR = REGISTRY.register("yellow_birch_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> YELLOW_BIRCH_TRAPDOOR = REGISTRY.register("yellow_birch_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> YELLOW_BIRCH_BUTTON = REGISTRY.register("yellow_birch_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> BLACK_BIRCH_LOG = REGISTRY.register("black_birch_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_BIRCH_WOOD = REGISTRY.register("black_birch_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_BLACK_BIRCH_LOG = REGISTRY.register("stripped_black_birch_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_BLACK_BIRCH_WOOD = REGISTRY.register("stripped_black_birch_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_BIRCH_PLANKS = REGISTRY.register("black_birch_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_BIRCH_SLAB = REGISTRY.register("black_birch_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_BIRCH_STAIRS = REGISTRY.register("black_birch_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> BLACK_BIRCH_VERTICAL_SLAB = REGISTRY.register("black_birch_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_BIRCH_FENCE = REGISTRY.register("black_birch_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_BIRCH_FENCE_GATE = REGISTRY.register("black_birch_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_BIRCH_PRESSURE_PLATE = REGISTRY.register("black_birch_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> BLACK_BIRCH_DOOR = REGISTRY.register("black_birch_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> BLACK_BIRCH_TRAPDOOR = REGISTRY.register("black_birch_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> BLACK_BIRCH_BUTTON = REGISTRY.register("black_birch_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> MAPLE_LOG = REGISTRY.register("maple_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> MAPLE_WOOD = REGISTRY.register("maple_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_MAPLE_LOG = REGISTRY.register("stripped_maple_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_MAPLE_WOOD = REGISTRY.register("stripped_maple_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> MAPLE_PLANKS = REGISTRY.register("maple_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> MAPLE_SLAB = REGISTRY.register("maple_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> MAPLE_STAIRS = REGISTRY.register("maple_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> MAPLE_VERTICAL_SLAB = REGISTRY.register("maple_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> MAPLE_FENCE = REGISTRY.register("maple_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> MAPLE_FENCE_GATE = REGISTRY.register("maple_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> MAPLE_PRESSURE_PLATE = REGISTRY.register("maple_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> MAPLE_DOOR = REGISTRY.register("maple_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> MAPLE_TRAPDOOR = REGISTRY.register("maple_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> MAPLE_BUTTON = REGISTRY.register("maple_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> SHARINGA_LOG = REGISTRY.register("sharinga_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> SHARINGA_WOOD = REGISTRY.register("sharinga_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_SHARINGA_LOG = REGISTRY.register("stripped_sharinga_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_SHARINGA_WOOD = REGISTRY.register("stripped_sharinga_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> SHARINGA_PLANKS = REGISTRY.register("sharinga_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> SHARINGA_SLAB = REGISTRY.register("sharinga_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> SHARINGA_STAIRS = REGISTRY.register("sharinga_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> SHARINGA_VERTICAL_SLAB = REGISTRY.register("sharinga_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> SHARINGA_FENCE = REGISTRY.register("sharinga_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> SHARINGA_FENCE_GATE = REGISTRY.register("sharinga_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> SHARINGA_PRESSURE_PLATE = REGISTRY.register("sharinga_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> SHARINGA_DOOR = REGISTRY.register("sharinga_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> SHARINGA_TRAPDOOR = REGISTRY.register("sharinga_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> SHARINGA_BUTTON = REGISTRY.register("sharinga_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> BLACK_WALNUT_LOG = REGISTRY.register("black_walnut_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_WALNUT_WOOD = REGISTRY.register("black_walnut_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_BLACK_WALNUT_LOG = REGISTRY.register("stripped_black_walnut_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_BLACK_WALNUT_WOOD = REGISTRY.register("stripped_black_walnut_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_WALNUT_PLANKS = REGISTRY.register("black_walnut_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_WALNUT_SLAB = REGISTRY.register("black_walnut_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_WALNUT_STAIRS = REGISTRY.register("black_walnut_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> BLACK_WALNUT_VERTICAL_SLAB = REGISTRY.register("black_walnut_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_WALNUT_FENCE = REGISTRY.register("black_walnut_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_WALNUT_FENCE_GATE = REGISTRY.register("black_walnut_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> BLACK_WALNUT_PRESSURE_PLATE = REGISTRY.register("black_walnut_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> BLACK_WALNUT_DOOR = REGISTRY.register("black_walnut_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> BLACK_WALNUT_TRAPDOOR = REGISTRY.register("black_walnut_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> BLACK_WALNUT_BUTTON = REGISTRY.register("black_walnut_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> CORK_OAK_LOG = REGISTRY.register("cork_oak_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> CORK_OAK_WOOD = REGISTRY.register("cork_oak_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_CORK_OAK_LOG = REGISTRY.register("stripped_cork_oak_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_CORK_OAK_WOOD = REGISTRY.register("stripped_cork_oak_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> CORK_OAK_PLANKS = REGISTRY.register("cork_oak_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> CORK_OAK_SLAB = REGISTRY.register("cork_oak_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> CORK_OAK_STAIRS = REGISTRY.register("cork_oak_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> CORK_OAK_VERTICAL_SLAB = REGISTRY.register("cork_oak_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> CORK_OAK_FENCE = REGISTRY.register("cork_oak_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> CORK_OAK_FENCE_GATE = REGISTRY.register("cork_oak_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> CORK_OAK_PRESSURE_PLATE = REGISTRY.register("cork_oak_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> CORK_OAK_DOOR = REGISTRY.register("cork_oak_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> CORK_OAK_TRAPDOOR = REGISTRY.register("cork_oak_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> CORK_OAK_BUTTON = REGISTRY.register("cork_oak_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> CINNAMON_LOG = REGISTRY.register("cinnamon_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> CINNAMON_WOOD = REGISTRY.register("cinnamon_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_CINNAMON_LOG = REGISTRY.register("stripped_cinnamon_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_CINNAMON_WOOD = REGISTRY.register("stripped_cinnamon_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> CINNAMON_PLANKS = REGISTRY.register("cinnamon_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> CINNAMON_SLAB = REGISTRY.register("cinnamon_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> CINNAMON_STAIRS = REGISTRY.register("cinnamon_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> CINNAMON_VERTICAL_SLAB = REGISTRY.register("cinnamon_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> CINNAMON_FENCE = REGISTRY.register("cinnamon_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> CINNAMON_FENCE_GATE = REGISTRY.register("cinnamon_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> CINNAMON_PRESSURE_PLATE = REGISTRY.register("cinnamon_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> CINNAMON_DOOR = REGISTRY.register("cinnamon_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> CINNAMON_TRAPDOOR = REGISTRY.register("cinnamon_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> CINNAMON_BUTTON = REGISTRY.register("cinnamon_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> PETRIFIED_CHORUS_LOG = REGISTRY.register("petrified_chorus_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> PETRIFIED_CHORUS_WOOD = REGISTRY.register("petrified_chorus_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_PETRIFIED_CHORUS_LOG = REGISTRY.register("stripped_petrified_chorus_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_PETRIFIED_CHORUS_WOOD = REGISTRY.register("stripped_petrified_chorus_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> PETRIFIED_CHORUS_PLANKS = REGISTRY.register("petrified_chorus_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> PETRIFIED_CHORUS_SLAB = REGISTRY.register("petrified_chorus_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> PETRIFIED_CHORUS_STAIRS = REGISTRY.register("petrified_chorus_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> PETRIFIED_CHORUS_VERTICAL_SLAB = REGISTRY.register("petrified_chorus_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> PETRIFIED_CHORUS_FENCE = REGISTRY.register("petrified_chorus_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> PETRIFIED_CHORUS_FENCE_GATE = REGISTRY.register("petrified_chorus_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> PETRIFIED_CHORUS_PRESSURE_PLATE = REGISTRY.register("petrified_chorus_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> PETRIFIED_CHORUS_DOOR = REGISTRY.register("petrified_chorus_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> PETRIFIED_CHORUS_TRAPDOOR = REGISTRY.register("petrified_chorus_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> PETRIFIED_CHORUS_BUTTON = REGISTRY.register("petrified_chorus_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> ERYTHRINA_LOG = REGISTRY.register("erythrina_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> ERYTHRINA_WOOD = REGISTRY.register("erythrina_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_ERYTHRINA_LOG = REGISTRY.register("stripped_erythrina_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_ERYTHRINA_WOOD = REGISTRY.register("stripped_erythrina_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> ERYTHRINA_PLANKS = REGISTRY.register("erythrina_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> ERYTHRINA_SLAB = REGISTRY.register("erythrina_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> ERYTHRINA_STAIRS = REGISTRY.register("erythrina_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> ERYTHRINA_VERTICAL_SLAB = REGISTRY.register("erythrina_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> ERYTHRINA_FENCE = REGISTRY.register("erythrina_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> ERYTHRINA_FENCE_GATE = REGISTRY.register("erythrina_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> ERYTHRINA_PRESSURE_PLATE = REGISTRY.register("erythrina_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> ERYTHRINA_DOOR = REGISTRY.register("erythrina_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> ERYTHRINA_TRAPDOOR = REGISTRY.register("erythrina_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> ERYTHRINA_BUTTON = REGISTRY.register("erythrina_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> CHARRED_LOG = REGISTRY.register("charred_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> CHARRED_WOOD = REGISTRY.register("charred_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_CHARRED_LOG = REGISTRY.register("stripped_charred_log", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> STRIPPED_CHARRED_WOOD = REGISTRY.register("stripped_charred_wood", () -> new RotatedPillarBlock(DEF_WOOD));
    public static final RegistryObject<Block> CHARRED_PLANKS = REGISTRY.register("charred_planks", () -> new Block(DEF_WOOD));
    public static final RegistryObject<Block> CHARRED_SLAB = REGISTRY.register("charred_slab", () -> new RankineSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> CHARRED_STAIRS = REGISTRY.register("charred_stairs", () -> new RankineStairsBlock(Block.getStateById(0), DEF_WOOD));
    public static final RegistryObject<Block> CHARRED_VERTICAL_SLAB = REGISTRY.register("charred_vertical_slab", () -> new RankineVerticalSlabBlock(DEF_WOOD));
    public static final RegistryObject<Block> CHARRED_FENCE = REGISTRY.register("charred_fence", () -> new RankineWoodenFence(DEF_WOOD));
    public static final RegistryObject<Block> CHARRED_FENCE_GATE = REGISTRY.register("charred_fence_gate", () -> new RankineWoodenFenceGate(DEF_WOOD));
    public static final RegistryObject<Block> CHARRED_PRESSURE_PLATE = REGISTRY.register("charred_pressure_plate", RankineWoodenPressurePlate::new);
    public static final RegistryObject<Block> CHARRED_DOOR = REGISTRY.register("charred_door", RankineWoodenDoor::new);
    public static final RegistryObject<Block> CHARRED_TRAPDOOR = REGISTRY.register("charred_trapdoor", RankineWoodenTrapDoor::new);
    public static final RegistryObject<Block> CHARRED_BUTTON = REGISTRY.register("charred_button", RankineWoodenButton::new);
    public static final RegistryObject<Block> STUMP = REGISTRY.register("stump", () -> new StumpBlock(Block.Properties.create(Material.WOOD).sound(SoundType.WOOD).setRequiresTool().harvestTool(ToolType.AXE).hardnessAndResistance(16.0F, 9.0F).harvestLevel(3)));

    
    public static final RegistryObject<Block> BRASS_DOOR = REGISTRY.register("brass_door", RankineMetalDoor::new);
    public static final RegistryObject<Block> BRONZE_DOOR = REGISTRY.register("bronze_door", RankineMetalDoor::new);
    public static final RegistryObject<Block> CUPRONICKEL_DOOR = REGISTRY.register("cupronickel_door", RankineMetalDoor::new);
    public static final RegistryObject<Block> STEEL_DOOR = REGISTRY.register("steel_door", RankineMetalDoor::new);
    public static final RegistryObject<Block> BRASS_TRAPDOOR = REGISTRY.register("brass_trapdoor", RankineMetalTrapdoor::new);
    public static final RegistryObject<Block> BRONZE_TRAPDOOR = REGISTRY.register("bronze_trapdoor", RankineMetalTrapdoor::new);
    public static final RegistryObject<Block> STEEL_TRAPDOOR = REGISTRY.register("steel_trapdoor", RankineMetalTrapdoor::new);
    public static final RegistryObject<Block> CUPRONICKEL_TRAPDOOR = REGISTRY.register("cupronickel_trapdoor", RankineMetalTrapdoor::new);

    public static final RegistryObject<Block> ORANGE_LILY = REGISTRY.register("orange_lily", () -> new TallFlowerBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.PLANT)));
    public static final RegistryObject<Block> RED_LILY = REGISTRY.register("red_lily", () -> new TallFlowerBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.PLANT)));
    public static final RegistryObject<Block> WHITE_LILY = REGISTRY.register("white_lily", () -> new TallFlowerBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.PLANT)));
    public static final RegistryObject<Block> PURPLE_MORNING_GLORY = REGISTRY.register("purple_morning_glory", () -> new TallFlowerBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.PLANT)));
    public static final RegistryObject<Block> BLUE_MORNING_GLORY = REGISTRY.register("blue_morning_glory", () -> new TallFlowerBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.PLANT)));
    public static final RegistryObject<Block> BLACK_MORNING_GLORY = REGISTRY.register("black_morning_glory", () -> new TallFlowerBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.PLANT)));
    public static final RegistryObject<Block> GOLDENROD = REGISTRY.register("goldenrod", () -> new TallFlowerBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.PLANT)));

    public static final RegistryObject<Block> CEDAR_LEAVES = REGISTRY.register("cedar_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> COCONUT_PALM_LEAVES = REGISTRY.register("coconut_palm_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> PINYON_PINE_LEAVES = REGISTRY.register("pinyon_pine_leaves", () -> new LeavesBlock(DEF_LEAVES));;
    public static final RegistryObject<Block> JUNIPER_LEAVES = REGISTRY.register("juniper_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> BALSAM_FIR_LEAVES = REGISTRY.register("balsam_fir_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> MAGNOLIA_LEAVES = REGISTRY.register("magnolia_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_LEAVES = REGISTRY.register("eastern_hemlock_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> YELLOW_BIRCH_LEAVES = REGISTRY.register("yellow_birch_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> BLACK_BIRCH_LEAVES = REGISTRY.register("black_birch_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> MAPLE_LEAVES = REGISTRY.register("maple_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> SHARINGA_LEAVES = REGISTRY.register("sharinga_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> BLACK_WALNUT_LEAVES = REGISTRY.register("black_walnut_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> CORK_OAK_LEAVES = REGISTRY.register("cork_oak_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> CINNAMON_LEAVES = REGISTRY.register("cinnamon_leaves", () -> new LeavesBlock(DEF_LEAVES));
    public static final RegistryObject<Block> ERYTHRINA_LEAVES = REGISTRY.register("erythrina_leaves", () -> new LeavesBlock(DEF_LEAVES));

    private static final Block.Properties DEF_SAPLING = Block.Properties.create(Material.PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0).sound(SoundType.PLANT);
    public static final RegistryObject<Block> CEDAR_SAPLING = REGISTRY.register("cedar_sapling", () -> new RankineSaplingBlock(new CedarTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> COCONUT_PALM_SAPLING = REGISTRY.register("coconut_palm_sapling", () -> new RankineSaplingBlock(new CoconutPalmTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> PINYON_PINE_SAPLING = REGISTRY.register("pinyon_pine_sapling", () -> new RankineSaplingBlock(new PinyonPineTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> JUNIPER_SAPLING = REGISTRY.register("juniper_sapling", () -> new RankineSaplingBlock(new JuniperTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> BALSAM_FIR_SAPLING = REGISTRY.register("balsam_fir_sapling", () -> new RankineSaplingBlock(new BalsamFirTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> MAGNOLIA_SAPLING = REGISTRY.register("magnolia_sapling", () -> new RankineSaplingBlock(new MagnoliaTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> EASTERN_HEMLOCK_SAPLING = REGISTRY.register("eastern_hemlock_sapling", () -> new RankineSaplingBlock(new EasternHemlockTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> YELLOW_BIRCH_SAPLING = REGISTRY.register("yellow_birch_sapling", () -> new RankineSaplingBlock(new YellowBirchTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> BLACK_BIRCH_SAPLING = REGISTRY.register("black_birch_sapling", () -> new RankineSaplingBlock(new BlackBirchTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> MAPLE_SAPLING = REGISTRY.register("maple_sapling", () -> new RankineSaplingBlock(new MapleTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> SHARINGA_SAPLING = REGISTRY.register("sharinga_sapling", () -> new RankineSaplingBlock(new SharingaTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> BLACK_WALNUT_SAPLING = REGISTRY.register("black_walnut_sapling", () -> new RankineSaplingBlock(new BlackWalnutTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> CORK_OAK_SAPLING = REGISTRY.register("cork_oak_sapling", () -> new RankineSaplingBlock(new CorkOakTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> CINNAMON_SAPLING = REGISTRY.register("cinnamon_sapling", () -> new RankineSaplingBlock(new CinnamonTree(), DEF_SAPLING, 3));
    public static final RegistryObject<Block> ERYTHRINA_SAPLING = REGISTRY.register("erythrina_sapling", () -> new RankineSaplingBlock(new CinnamonTree(), DEF_SAPLING, 3));

    public static final RegistryObject<Block> POTTED_CEDAR_SAPLING = REGISTRY.register("potted_cedar_sapling", () -> new FlowerPotBlock(null, CEDAR_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_PINYON_PINE_SAPLING = REGISTRY.register("potted_pinyon_pine_sapling", () -> new FlowerPotBlock(null, PINYON_PINE_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_JUNIPER_SAPLING = REGISTRY.register("potted_juniper_sapling", () -> new FlowerPotBlock(null, JUNIPER_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_COCONUT_PALM_SAPLING = REGISTRY.register("potted_coconut_palm_sapling", () -> new FlowerPotBlock(null, COCONUT_PALM_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_BALSAM_FIR_SAPLING = REGISTRY.register("potted_balsam_fir_sapling", () -> new FlowerPotBlock(null, BALSAM_FIR_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_MAGNOLIA_SAPLING = REGISTRY.register("potted_magnolia_sapling", () -> new FlowerPotBlock(null, MAGNOLIA_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_EASTERN_HEMLOCK_SAPLING = REGISTRY.register("potted_eastern_hemlock_sapling", () -> new FlowerPotBlock(null, EASTERN_HEMLOCK_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_YELLOW_BIRCH_SAPLING = REGISTRY.register("potted_yellow_birch_sapling", () -> new FlowerPotBlock(null, YELLOW_BIRCH_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_BLACK_BIRCH_SAPLING = REGISTRY.register("potted_black_birch_sapling", () -> new FlowerPotBlock(null, BLACK_BIRCH_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_MAPLE_SAPLING = REGISTRY.register("potted_maple_sapling", () -> new FlowerPotBlock(null,MAPLE_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_SHARINGA_SAPLING = REGISTRY.register("potted_sharinga_sapling", () -> new FlowerPotBlock(null,SHARINGA_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_BLACK_WALNUT_SAPLING = REGISTRY.register("potted_black_walnut_sapling", () -> new FlowerPotBlock(null,BLACK_WALNUT_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_CORK_OAK_SAPLING = REGISTRY.register("potted_cork_oak_sapling", () -> new FlowerPotBlock(null,CORK_OAK_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_CINNAMON_SAPLING = REGISTRY.register("potted_cinnamon_sapling", () -> new FlowerPotBlock(null,CINNAMON_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));
    public static final RegistryObject<Block> POTTED_ERYTHRINA_SAPLING = REGISTRY.register("potted_erythrina_sapling", () -> new FlowerPotBlock(null,CINNAMON_SAPLING, Block.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(0.0f).notSolid()));


    //ALLOY BLOCKS
    public static final RegistryObject<Block> ROSE_GOLD_BLOCK = REGISTRY.register("rose_gold_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> WHITE_GOLD_BLOCK = REGISTRY.register("white_gold_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> GREEN_GOLD_BLOCK = REGISTRY.register("green_gold_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BLUE_GOLD_BLOCK = REGISTRY.register("blue_gold_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> PURPLE_GOLD_BLOCK = REGISTRY.register("purple_gold_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BLACK_GOLD_BLOCK = REGISTRY.register("black_gold_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> INVAR_BLOCK = REGISTRY.register("invar_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> PEWTER_BLOCK = REGISTRY.register("pewter_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BRONZE_BLOCK = REGISTRY.register("bronze_block", () -> new AlloyBlock(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> OSMIRIDIUM_BLOCK = REGISTRY.register("osmiridium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> STEEL_BLOCK = REGISTRY.register("steel_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> STAINLESS_STEEL_BLOCK = REGISTRY.register("stainless_steel_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ALNICO_BLOCK = REGISTRY.register("alnico_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> MAGNESIUM_ALLOY_BLOCK = REGISTRY.register("magnesium_alloy_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> DURALUMIN_BLOCK = REGISTRY.register("duralumin_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BRASS_BLOCK = REGISTRY.register("brass_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CUPRONICKEL_BLOCK = REGISTRY.register("cupronickel_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NICKEL_SILVER_BLOCK = REGISTRY.register("nickel_silver_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> STERLING_SILVER_BLOCK = REGISTRY.register("sterling_silver_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NITINOL_BLOCK = REGISTRY.register("nitinol_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TITANIUM_ALLOY_BLOCK = REGISTRY.register("titanium_alloy_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> GALINSTAN_BLOCK = REGISTRY.register("galinstan_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> MISCHMETAL_BLOCK = REGISTRY.register("mischmetal_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> FERROCERIUM_BLOCK = REGISTRY.register("ferrocerium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> AMALGAM_BLOCK = REGISTRY.register("amalgam_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ROSE_METAL_BLOCK = REGISTRY.register("rose_metal_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CAST_IRON_BLOCK = REGISTRY.register("cast_iron_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NICKEL_SUPERALLOY_BLOCK = REGISTRY.register("nickel_superalloy_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> COBALT_SUPERALLOY_BLOCK = REGISTRY.register("cobalt_superalloy_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TUNGSTEN_HEAVY_ALLOY_BLOCK = REGISTRY.register("tungsten_heavy_alloy_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> SODIUM_POTASSIUM_ALLOY_BLOCK = REGISTRY.register("sodium_potassium_alloy_block", () -> new Block(DEF_METAL_BLOCK));

    //GEM AND MINERALS
    public static final RegistryObject<Block> MALACHITE_BLOCK = REGISTRY.register("malachite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> AZURITE_BLOCK = REGISTRY.register("azurite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> LABRADORITE_BLOCK = REGISTRY.register("labradorite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> FLUORITE_BLOCK = REGISTRY.register("fluorite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> AQUAMARINE_BLOCK = REGISTRY.register("aquamarine_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> SAPPHIRE_BLOCK = REGISTRY.register("sapphire_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> RUBY_BLOCK = REGISTRY.register("ruby_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TIGER_IRON_BLOCK = REGISTRY.register("tiger_iron_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> OPAL_BLOCK = REGISTRY.register("opal_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> GARNET_BLOCK = REGISTRY.register("garnet_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PERIDOT_BLOCK = REGISTRY.register("peridot_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TOPAZ_BLOCK = REGISTRY.register("topaz_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> AMBER_BLOCK = REGISTRY.register("amber_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TOURMALINE_BLOCK = REGISTRY.register("tourmaline_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PEARL_BLOCK = REGISTRY.register("pearl_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> LONSDALEITE_DIAMOND_BLOCK = REGISTRY.register("lonsdaleite_diamond_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CELESTINE_BLOCK = REGISTRY.register("celestine_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CINNABAR_BLOCK = REGISTRY.register("cinnabar_block", () -> new CinnabarBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(5.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> PERLITE_BLOCK = REGISTRY.register("perlite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> RHODONITE_BLOCK = REGISTRY.register("rhodonite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> RHODOCHROSITE_BLOCK = REGISTRY.register("rhodochrosite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> GRAPHITE_BLOCK = REGISTRY.register("graphite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ORTHOCLASE_FELDSPAR_BLOCK = REGISTRY.register("orthoclase_feldspar_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> PLAGIOCLASE_FELDSPAR_BLOCK = REGISTRY.register("plagioclase_feldspar_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> OLIVINE_BLOCK = REGISTRY.register("olivine_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> PYROXENE_BLOCK = REGISTRY.register("pyroxene_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> MICA_BLOCK = REGISTRY.register("mica_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> AMPHIBOLE_BLOCK = REGISTRY.register("amphibole_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> POZZOLAN_BLOCK = REGISTRY.register("pozzolan_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> EVAPORITE = REGISTRY.register("evaporite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> FULGURITE = REGISTRY.register("fulgurite", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> DOLOMITE_BLOCK = REGISTRY.register("dolomite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> CALCITE_BLOCK = REGISTRY.register("calcite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> SALT_BLOCK = REGISTRY.register("salt_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> PINK_SALT_BLOCK = REGISTRY.register("pink_salt_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> CALCIUM_SILICATE_BLOCK = REGISTRY.register("calcium_silicate_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(0.5F, 0.5F).harvestLevel(0)));
    public static final RegistryObject<Block> SILICON_CARBIDE_BLOCK = REGISTRY.register("silicon_carbide_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CHROME_ENSTATITE_BLOCK = REGISTRY.register("chrome_enstatite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().hardnessAndResistance(2.0F, 5.0F).harvestLevel(0)));

    public static final RegistryObject<Block> CASSITERITE_BLOCK = REGISTRY.register("cassiterite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BAUXITE_BLOCK = REGISTRY.register("bauxite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> SPHALERITE_BLOCK = REGISTRY.register("sphalerite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> MAGNETITE_BLOCK = REGISTRY.register("magnetite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PENTLANDITE_BLOCK = REGISTRY.register("pentlandite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> GALENA_BLOCK = REGISTRY.register("galena_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> VANADINITE_BLOCK = REGISTRY.register("vanadinite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BISMUTHINITE_BLOCK = REGISTRY.register("bismuthinite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ACANTHITE_BLOCK = REGISTRY.register("acanthite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PYROLUSITE_BLOCK = REGISTRY.register("pyrolusite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CHROMITE_BLOCK = REGISTRY.register("chromite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> MOLYBDENITE_BLOCK = REGISTRY.register("molybdenite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ILMENITE_BLOCK = REGISTRY.register("ilmenite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> COLUMBITE_BLOCK = REGISTRY.register("columbite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> WOLFRAMITE_BLOCK = REGISTRY.register("wolframite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> RHENIITE_BLOCK = REGISTRY.register("rheniite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TANTALITE_BLOCK = REGISTRY.register("tantalite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> GREENOCKITE_BLOCK = REGISTRY.register("greenockite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> URANINITE_BLOCK = REGISTRY.register("uraninite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> THORITE_BLOCK = REGISTRY.register("thorite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> STIBNITE_BLOCK = REGISTRY.register("stibnite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> XENOTIME_BLOCK = REGISTRY.register("xenotime_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PETALITE_BLOCK = REGISTRY.register("petalite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> COBALTITE_BLOCK = REGISTRY.register("cobaltite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CRYOLITE_BLOCK = REGISTRY.register("cryolite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CHALCOPYRITE_BLOCK = REGISTRY.register("chalcopyrite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BARITE_BLOCK = REGISTRY.register("barite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> THORTVEITITE_BLOCK = REGISTRY.register("thortveitite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CERIUM_MONAZITE_BLOCK = REGISTRY.register("cerium_monazite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> LANTHANUM_MONAZITE_BLOCK = REGISTRY.register("lanthanum_monazite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> NEODYMIUM_MONAZITE_BLOCK = REGISTRY.register("neodymium_monazite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> SAMARIUM_MONAZITE_BLOCK = REGISTRY.register("samarium_monazite_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ZIRCON_BLOCK = REGISTRY.register("zircon_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PLATINUM_ARSENIDE_BLOCK = REGISTRY.register("platinum_arsenide_block", () -> new Block(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F,5.0F).harvestLevel(0)));


    public static final RegistryObject<Block> COKE_BLOCK = REGISTRY.register("coke_block", () -> new Block(Block.Properties.create(Material.ROCK, MaterialColor.BLACK).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> LIGNITE_BLOCK = REGISTRY.register("lignite_block", () -> new Block(Block.Properties.create(Material.ROCK, MaterialColor.BLACK).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> SUBBITUMINOUS_COAL_BLOCK = REGISTRY.register("subbituminous_coal_block", () -> new Block(Block.Properties.create(Material.ROCK, MaterialColor.BLACK).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BITUMINOUS_COAL_BLOCK = REGISTRY.register("bituminous_coal_block", () -> new Block(Block.Properties.create(Material.ROCK, MaterialColor.BLACK).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ANTHRACITE_COAL_BLOCK = REGISTRY.register("anthracite_coal_block", () -> new Block(Block.Properties.create(Material.ROCK, MaterialColor.BLACK).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).harvestLevel(0)));

    //ORES
    public static final RegistryObject<Block> PETALITE_ORE = REGISTRY.register("petalite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PETALITE_ORE_HL.get())));
    public static final RegistryObject<Block> LIGNITE_ORE = REGISTRY.register("lignite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.LIGNITE_ORE_HL.get())));
    public static final RegistryObject<Block> SUBBITUMINOUS_ORE = REGISTRY.register("subbituminous_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.SUBBITUMINOUS_ORE_HL.get())));
    public static final RegistryObject<Block> BITUMINOUS_ORE = REGISTRY.register("bituminous_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.BITUMINOUS_ORE_HL.get())));
    public static final RegistryObject<Block> ANTHRACITE_ORE = REGISTRY.register("anthracite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.ANTHRACITE_ORE_HL.get())));
    public static final RegistryObject<Block> MAGNESITE_ORE = REGISTRY.register("magnesite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.MAGNESITE_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_ALUMINUM_ORE = REGISTRY.register("native_aluminum_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_ALUMINUM_ORE_HL.get())));
    public static final RegistryObject<Block> BAUXITE_ORE = REGISTRY.register("bauxite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.BAUXITE_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_SULFUR_ORE = REGISTRY.register("native_sulfur_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_SULFUR_ORE_HL.get())));
    public static final RegistryObject<Block> ILMENITE_ORE = REGISTRY.register("ilmenite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.ILMENITE_ORE_HL.get())));
    public static final RegistryObject<Block> VANADINITE_ORE = REGISTRY.register("vanadinite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.VANADINITE_ORE_HL.get())));
    public static final RegistryObject<Block> CHROMITE_ORE = REGISTRY.register("chromite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.CHROMITE_ORE_HL.get())));
    public static final RegistryObject<Block> PYROLUSITE_ORE = REGISTRY.register("pyrolusite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PYROLUSITE_ORE_HL.get())));
    public static final RegistryObject<Block> MAGNETITE_ORE = REGISTRY.register("magnetite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.MAGNETITE_ORE_HL.get())));
    public static final RegistryObject<Block> COBALTITE_ORE = REGISTRY.register("cobaltite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.COBALTITE_ORE_HL.get())));
    public static final RegistryObject<Block> PENTLANDITE_ORE = REGISTRY.register("pentlandite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PENTLANDITE_ORE_HL.get())));
    public static final RegistryObject<Block> INTERSPINIFEX_ORE = REGISTRY.register("interspinifex_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.INTERSPINIFEX_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_COPPER_ORE = REGISTRY.register("native_copper_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_COPPER_ORE_HL.get())));
    public static final RegistryObject<Block> MALACHITE_ORE = REGISTRY.register("malachite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.MALACHITE_ORE_HL.get())));
    public static final RegistryObject<Block> SPHALERITE_ORE = REGISTRY.register("sphalerite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.SPHALERITE_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_GALLIUM_ORE = REGISTRY.register("native_gallium_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_GALLIUM_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_ARSENIC_ORE = REGISTRY.register("native_arsenic_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_ARSENIC_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_SELENIUM_ORE = REGISTRY.register("native_selenium_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_SELENIUM_ORE_HL.get())));
    public static final RegistryObject<Block> CELESTINE_ORE = REGISTRY.register("celestine_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.CELESTINE_ORE_HL.get())));
    public static final RegistryObject<Block> XENOTIME_ORE = REGISTRY.register("xenotime_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.XENOTIME_ORE_HL.get())));
    public static final RegistryObject<Block> COLUMBITE_ORE = REGISTRY.register("columbite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.COLUMBITE_ORE_HL.get())));
    public static final RegistryObject<Block> MOLYBDENITE_ORE = REGISTRY.register("molybdenite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.MOLYBDENITE_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_SILVER_ORE = REGISTRY.register("native_silver_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_SILVER_ORE_HL.get())));
    public static final RegistryObject<Block> ACANTHITE_ORE = REGISTRY.register("acanthite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.ACANTHITE_ORE_HL.get())));
    public static final RegistryObject<Block> GREENOCKITE_ORE = REGISTRY.register("greenockite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.GREENOCKITE_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_INDIUM_ORE = REGISTRY.register("native_indium_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_INDIUM_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_TIN_ORE = REGISTRY.register("native_tin_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_TIN_ORE_HL.get())));
    public static final RegistryObject<Block> CASSITERITE_ORE = REGISTRY.register("cassiterite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.CASSITERITE_ORE_HL.get())));
    public static final RegistryObject<Block> STIBNITE_ORE = REGISTRY.register("stibnite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.STIBNITE_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_TELLURIUM_ORE = REGISTRY.register("native_tellurium_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_TELLURIUM_ORE_HL.get())));
    public static final RegistryObject<Block> TANTALITE_ORE = REGISTRY.register("tantalite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.TANTALITE_ORE_HL.get())));
    public static final RegistryObject<Block> WOLFRAMITE_ORE = REGISTRY.register("wolframite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.WOLFRAMITE_ORE_HL.get())));
    public static final RegistryObject<Block> RHENIITE_ORE = REGISTRY.register("rheniite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.RHENIITE_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_GOLD_ORE = REGISTRY.register("native_gold_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_GOLD_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_LEAD_ORE = REGISTRY.register("native_lead_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_LEAD_ORE_HL.get())));
    public static final RegistryObject<Block> GALENA_ORE = REGISTRY.register("galena_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.GALENA_ORE_HL.get())));
    public static final RegistryObject<Block> NATIVE_BISMUTH_ORE = REGISTRY.register("native_bismuth_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.NATIVE_BISMUTH_ORE_HL.get())));
    public static final RegistryObject<Block> BISMUTHINITE_ORE = REGISTRY.register("bismuthinite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.BISMUTHINITE_ORE_HL.get())));
    public static final RegistryObject<Block> URANINITE_ORE = REGISTRY.register("uraninite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.URANINITE_ORE_HL.get())));
    public static final RegistryObject<Block> PLUMBAGO_ORE = REGISTRY.register("plumbago_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PLUMBAGO_ORE_HL.get())));
    public static final RegistryObject<Block> MOISSANITE_ORE = REGISTRY.register("moissanite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.MOISSANITE_ORE_HL.get())));
    public static final RegistryObject<Block> SPERRYLITE_ORE = REGISTRY.register("sperrylite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.SPERRYLITE_ORE_HL.get())));
    public static final RegistryObject<Block> LAZURITE_ORE = REGISTRY.register("lazurite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.LAZURITE_ORE_HL.get())));
    public static final RegistryObject<Block> DIAMOND_ORE = REGISTRY.register("diamond_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.DIAMOND_ORE_HL.get())));
    public static final RegistryObject<Block> EMERALD_ORE = REGISTRY.register("emerald_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.EMERALD_ORE_HL.get())));
    public static final RegistryObject<Block> OPAL_ORE = REGISTRY.register("opal_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.OPAL_ORE_HL.get())));
    public static final RegistryObject<Block> AQUAMARINE_ORE = REGISTRY.register("aquamarine_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.AQUAMARINE_ORE_HL.get())));
    public static final RegistryObject<Block> MAJORITE_ORE = REGISTRY.register("majorite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.MAJORITE_ORE_HL.get())));
    public static final RegistryObject<Block> QUARTZ_ORE = REGISTRY.register("quartz_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(1)));
    public static final RegistryObject<Block> FLUORITE_ORE = REGISTRY.register("fluorite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.FLUORITE_ORE_HL.get())));
    public static final RegistryObject<Block> CINNABAR_ORE = REGISTRY.register("cinnabar_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.CINNABAR_ORE_HL.get())));
    public static final RegistryObject<Block> HALITE_ORE = REGISTRY.register("halite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.HALITE_ORE_HL.get())));
    public static final RegistryObject<Block> PINK_HALITE_ORE = REGISTRY.register("pink_halite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PINK_HALITE_ORE_HL.get())));
    public static final RegistryObject<Block> CRYOLITE_ORE = REGISTRY.register("cryolite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.CRYOLITE_ORE_HL.get())));
    public static final RegistryObject<Block> PYRITE_ORE = REGISTRY.register("pyrite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PYRITE_ORE_HL.get())));
    public static final RegistryObject<Block> KAMACITE_ORE = REGISTRY.register("kamacite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PYRITE_ORE_HL.get())));
    public static final RegistryObject<Block> ANTITAENITE_ORE = REGISTRY.register("antitaenite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PYRITE_ORE_HL.get())));
    public static final RegistryObject<Block> TAENITE_ORE = REGISTRY.register("taenite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PYRITE_ORE_HL.get())));
    public static final RegistryObject<Block> TETRATAENITE_ORE = REGISTRY.register("tetrataenite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PYRITE_ORE_HL.get())));
    public static final RegistryObject<Block> LONSDALEITE_ORE = REGISTRY.register("lonsdaleite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PYRITE_ORE_HL.get())));
    public static final RegistryObject<Block> MONAZITE_ORE = REGISTRY.register("monazite_ore", () -> new RankineOreBlock(DEF_ORE.harvestLevel(WGConfig.ORES.PYRITE_ORE_HL.get())));


    public static final RegistryObject<Block> LIMESTONE_NODULE = REGISTRY.register("limestone_nodule", () -> new NoduleBlock(DEF_ORE.harvestLevel(0)));
    public static final RegistryObject<Block> METEORITE = REGISTRY.register("meteorite", () -> new Block(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> METEORITE_BRICKS = REGISTRY.register("meteorite_bricks", () -> new Block(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> ENSTATITE = REGISTRY.register("enstatite", () -> new Block(DEF_STONE.harvestLevel(3)));
    public static final RegistryObject<Block> ENSTATITE_BRICKS = REGISTRY.register("enstatite_bricks", () -> new Block(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> FROZEN_METEORITE = REGISTRY.register("frozen_meteorite", () -> new Block(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> FROZEN_METEORITE_BRICKS = REGISTRY.register("frozen_meteorite_bricks", () -> new Block(DEF_STONE.harvestLevel(1)));
    public static final RegistryObject<Block> GREEN_TEKTITE = REGISTRY.register("green_tektite", () -> new GlassBlock(Block.Properties.create(Material.GLASS).hardnessAndResistance(5.0F,30.0F).sound(SoundType.GLASS).notSolid().harvestLevel(0)));
    public static final RegistryObject<Block> GRAY_TEKTITE = REGISTRY.register("gray_tektite", () -> new GlassBlock(Block.Properties.create(Material.GLASS).hardnessAndResistance(5.0F,30.0F).sound(SoundType.GLASS).notSolid().harvestLevel(0)));
    public static final RegistryObject<Block> BLACK_TEKTITE = REGISTRY.register("black_tektite", () -> new GlassBlock(Block.Properties.create(Material.GLASS).hardnessAndResistance(5.0F,30.0F).sound(SoundType.GLASS).notSolid().harvestLevel(0)));
    public static final RegistryObject<Block> BROWN_TEKTITE = REGISTRY.register("brown_tektite", () -> new GlassBlock(Block.Properties.create(Material.GLASS).hardnessAndResistance(5.0F,30.0F).sound(SoundType.GLASS).notSolid().harvestLevel(0)));



    public static final RegistryObject<Block> CORK = REGISTRY.register("cork", () -> new Block(Block.Properties.create(Material.WOOL).sound(SoundType.CLOTH).hardnessAndResistance(1.0F, 2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> VULCANIZED_RUBBER_BLOCK = REGISTRY.register("vulcanized_rubber_block", () -> new RubberBlock(AbstractBlock.Properties.create(Material.CLAY, MaterialColor.BLACK).slipperiness(0.8F).hardnessAndResistance(1.0F, 2.0F).sound(SoundType.SLIME)));



    public static final RegistryObject<Block> ALUMINUM_SHEETMETAL = REGISTRY.register("aluminum_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TITANIUM_SHEETMETAL = REGISTRY.register("titanium_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> NICKEL_SHEETMETAL = REGISTRY.register("nickel_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> COPPER_SHEETMETAL = REGISTRY.register("copper_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> SILVER_SHEETMETAL = REGISTRY.register("silver_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TIN_SHEETMETAL = REGISTRY.register("tin_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TUNGSTEN_SHEETMETAL = REGISTRY.register("tungsten_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PLATINUM_SHEETMETAL = REGISTRY.register("platinum_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> GOLD_SHEETMETAL = REGISTRY.register("gold_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> LEAD_SHEETMETAL = REGISTRY.register("lead_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BISMUTH_SHEETMETAL = REGISTRY.register("bismuth_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BRONZE_SHEETMETAL = REGISTRY.register("bronze_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BRASS_SHEETMETAL = REGISTRY.register("brass_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> INVAR_SHEETMETAL = REGISTRY.register("invar_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CUPRONICKEL_SHEETMETAL = REGISTRY.register("cupronickel_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> STEEL_SHEETMETAL = REGISTRY.register("steel_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> STAINLESS_STEEL_SHEETMETAL = REGISTRY.register("stainless_steel_sheetmetal", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ALUMINUM_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("aluminum_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TITANIUM_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("titanium_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> NICKEL_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("nickel_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> COPPER_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("copper_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> SILVER_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("silver_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TIN_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("tin_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TUNGSTEN_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("tungsten_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PLATINUM_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("platinum_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> GOLD_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("gold_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> LEAD_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("lead_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BISMUTH_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("bismuth_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BRONZE_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("bronze_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BRASS_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("brass_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> INVAR_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("invar_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CUPRONICKEL_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("cupronickel_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> STEEL_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("steel_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> STAINLESS_STEEL_SHEETMETAL_VERTICAL_SLAB = REGISTRY.register("stainless_steel_sheetmetal_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().hardnessAndResistance(3.0F, 10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CAST_IRON_SUPPORT = REGISTRY.register("cast_iron_support", () -> new Block(Block.Properties.create(Material.IRON, MaterialColor.AIR).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,6.0F).notSolid()));
    public static final RegistryObject<Block> CAST_IRON_SUPPORT_SLAB = REGISTRY.register("cast_iron_support_slab", () -> new RankineSlabBlock(Block.Properties.create(Material.IRON, MaterialColor.AIR).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,6.0F).notSolid()));
    public static final RegistryObject<Block> CAST_IRON_SUPPORT_STAIRS = REGISTRY.register("cast_iron_support_stairs", () -> new RankineStairsBlock(Block.getStateById(0),Block.Properties.create(Material.IRON, MaterialColor.AIR).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,6.0F).notSolid()));
    public static final RegistryObject<Block> CAST_IRON_SUPPORT_VERTICAL_SLAB = REGISTRY.register("cast_iron_support_vertical_slab", () -> new RankineVerticalSlabBlock(Block.Properties.create(Material.IRON, MaterialColor.AIR).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,6.0F).notSolid()));
    public static final RegistryObject<Block> CAST_IRON_BARS = REGISTRY.register("cast_iron_bars", () -> new PaneBlock(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));


    public static final RegistryObject<Block> BLASTING_POWDER = REGISTRY.register("blasting_powder", () -> new BlastingPowderBlock(Block.Properties.create(Material.SAND).sound(SoundType.SAND).hardnessAndResistance(1)));

    public static final RegistryObject<Block> BEEHIVE_OVEN_PIT = REGISTRY.register("beehive_oven_pit", () -> new BeehiveOvenPitBlock(REFRACTORY_BRICKS.get(),Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> HIGH_BEEHIVE_OVEN_PIT = REGISTRY.register("high_beehive_oven_pit", () -> new BeehiveOvenPitBlock(HIGH_REFRACTORY_BRICKS.get(),Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ULTRA_HIGH_BEEHIVE_OVEN_PIT = REGISTRY.register("ultra_high_beehive_oven_pit", () -> new BeehiveOvenPitBlock(ULTRA_HIGH_REFRACTORY_BRICKS.get(),Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CRUCIBLE_BLOCK = REGISTRY.register("crucible", () -> new CrucibleBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0).setLightLevel((p_235418_0_) -> 7)));
    public static final RegistryObject<Block> TEMPLATE_TABLE = REGISTRY.register("template_table", () -> new TemplateTableBlock(Block.Properties.create(Material.WOOD).sound(SoundType.WOOD).harvestTool(ToolType.AXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ALLOY_FURNACE = REGISTRY.register("alloy_furnace", () -> new AlloyFurnaceBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0).setLightLevel((p_235418_0_) -> 13)));
    public static final RegistryObject<Block> PISTON_CRUSHER = REGISTRY.register("piston_crusher", () -> new PistonCrusherBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0).setLightLevel((p_235418_0_) -> 7)));
    public static final RegistryObject<Block> PCF = REGISTRY.register("pcf", () -> new Block(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> INDUCTION_FURNACE = REGISTRY.register("induction_furnace", () -> new InductionFurnaceBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0).setLightLevel((p_235418_0_) -> 13)));
    public static final RegistryObject<Block> GYRATORY_CRUSHER = REGISTRY.register("gyratory_crusher", () -> new GyratoryCrusherBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> EVAPORATION_TOWER = REGISTRY.register("evaporation_tower", () -> new EvaporationTowerBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> DIAMOND_ANVIL_CELL = REGISTRY.register("diamond_anvil_cell", () -> new DiamondAnvilCellBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> RANKINE_BOX = REGISTRY.register("rankine_box", () -> new RankineBoxBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> LASER_QUARRY = REGISTRY.register("laser_quarry", () -> new LaserQuarryBlock(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> LASER_PYLON_TOP = REGISTRY.register("laser_pylon_top", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> LASER_PYLON_BASE = REGISTRY.register("laser_pylon_base", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CHARCOAL_PIT = REGISTRY.register("charcoal_pit", () -> new CharcoalPitBlock(Block.Properties.create(Material.ROCK).sound(SoundType.STONE).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(2.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TREE_TAP = REGISTRY.register("tree_tap", () -> new TreeTapBlock(AbstractBlock.Properties.create(Material.WOOD).sound(SoundType.WOOD).setRequiresTool().harvestTool(ToolType.AXE).hardnessAndResistance(2.0F).harvestLevel(0).notSolid()));
    public static final RegistryObject<Block> TAP_BARREL = REGISTRY.register("tap_barrel", () -> new TapBarrelBlock(AbstractBlock.Properties.create(Material.WOOD).sound(SoundType.WOOD).setRequiresTool().harvestTool(ToolType.AXE).hardnessAndResistance(2.0F).harvestLevel(0).notSolid()));
    public static final RegistryObject<Block> TAP_LINE = REGISTRY.register("tap_line", () -> new TapLineBlock(0.125f, AbstractBlock.Properties.create(Material.MISCELLANEOUS).sound(SoundType.CLOTH).setRequiresTool().harvestTool(ToolType.AXE).hardnessAndResistance(0.5F).harvestLevel(0).notSolid()));


    public static final RegistryObject<Block> RED_LED = REGISTRY.register("red_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> ORANGE_LED = REGISTRY.register("orange_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> YELLOW_LED = REGISTRY.register("yellow_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> LIME_LED = REGISTRY.register("lime_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> GREEN_LED = REGISTRY.register("green_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> CYAN_LED = REGISTRY.register("cyan_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> LIGHT_BLUE_LED = REGISTRY.register("light_blue_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> BLUE_LED = REGISTRY.register("blue_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> MAGENTA_LED = REGISTRY.register("magenta_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> PURPLE_LED = REGISTRY.register("purple_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> PINK_LED = REGISTRY.register("pink_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> BROWN_LED = REGISTRY.register("brown_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> BLACK_LED = REGISTRY.register("black_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> GRAY_LED = REGISTRY.register("gray_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> LIGHT_GRAY_LED = REGISTRY.register("light_gray_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));
    public static final RegistryObject<Block> WHITE_LED = REGISTRY.register("white_led", () -> new LEDBlock((AbstractBlock.Properties.create(Material.REDSTONE_LIGHT).setLightLevel(getLightValueLit(15)).hardnessAndResistance(1.0F,6.0F).sound(SoundType.METAL))));


    //MISC CREATIVE TAB
    public static final RegistryObject<Block> UNAGED_CHEESE = REGISTRY.register("unaged_cheese", () -> new UnagedCheeseBlock(AbstractBlock.Properties.create(Material.CAKE).hardnessAndResistance(0.5F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> AGED_CHEESE = REGISTRY.register("aged_cheese", () -> new CakeBlock(AbstractBlock.Properties.create(Material.CAKE).hardnessAndResistance(0.5F).sound(SoundType.CLOTH)));
    public static final RegistryObject<Block> ELDERBERRY_BUSH = REGISTRY.register("elderberry_bush", () -> new RankineDoublePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),0));
    public static final RegistryObject<Block> BLUEBERRY_BUSH = REGISTRY.register("blueberry_bush",  () -> new RankineDoublePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),1));
    public static final RegistryObject<Block> CRANBERRY_BUSH = REGISTRY.register("cranberry_bush",  () -> new RankineDoublePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),2));
    public static final RegistryObject<Block> SNOWBERRY_BUSH = REGISTRY.register("snowberry_bush", () -> new RankinePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),1));
    public static final RegistryObject<Block> RASPBERRY_BUSH = REGISTRY.register("raspberry_bush",  () -> new RankinePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),3));
    public static final RegistryObject<Block> BLACKBERRY_BUSH = REGISTRY.register("blackberry_bush",  () -> new RankinePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),4));
    public static final RegistryObject<Block> STRAWBERRY_BUSH = REGISTRY.register("strawberry_bush", () -> new RankinePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),6));
    public static final RegistryObject<Block> PINEAPPLE_BUSH = REGISTRY.register("pineapple_bush",   () -> new RankinePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),7));
    public static final RegistryObject<Block> BANANA_YUCCA_BUSH = REGISTRY.register("banana_yucca_bush",  () -> new RankinePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),8));
    public static final RegistryObject<Block> CAMPHOR_BASIL_PLANT = REGISTRY.register("camphor_basil_plant",  () -> new RankinePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),9));
    public static final RegistryObject<Block> ALOE_PLANT = REGISTRY.register("aloe_plant",  () -> new RankinePlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.SWEET_BERRY_BUSH),10));
    public static final RegistryObject<Block> ASPARAGUS_PLANT = REGISTRY.register("asparagus_plant",  () -> new AsparagusPlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.STEM)));
    public static final RegistryObject<Block> CORN_PLANT = REGISTRY.register("corn_plant",  () -> new CornPlantBlock(Block.Properties.create(Material.PLANTS).tickRandomly().doesNotBlockMovement().sound(SoundType.STEM)));
    public static final RegistryObject<Block> CORN_STALK = REGISTRY.register("corn_stalk",  () -> new CornStalkBlock(Block.Properties.create(Material.PLANTS).doesNotBlockMovement().sound(SoundType.STEM)));
    //public static final RegistryObject<Block> ASPARAGUS_ROOT = REGISTRY.register("asparagus_root",  () -> new AsparagusRootBlock(Block.Properties.create(Material.EARTH).tickRandomly().sound(SoundType.GROUND).hardnessAndResistance(0.5F)));
    public static final RegistryObject<Block> RICE_PLANT = REGISTRY.register("rice_plant",  () -> new RicePlantBlock(AbstractBlock.Properties.create(Material.PLANTS).doesNotBlockMovement().tickRandomly().zeroHardnessAndResistance().sound(SoundType.CROP)));
    public static final RegistryObject<Block> COTTON_PLANT = REGISTRY.register("cotton_plant",  () -> new CottonPlantBlock(AbstractBlock.Properties.create(Material.PLANTS).doesNotBlockMovement().tickRandomly().zeroHardnessAndResistance().sound(SoundType.CROP)));
    public static final RegistryObject<Block> JUTE_PLANT = REGISTRY.register("jute_plant",  () -> new JutePlantBlock(AbstractBlock.Properties.create(Material.PLANTS).doesNotBlockMovement().tickRandomly().zeroHardnessAndResistance().sound(SoundType.CROP)));



    public static final RegistryObject<Block> DURALUMIN_LADDER = REGISTRY.register("duralumin_ladder", () -> new MetalLadderBlock(true, false, Block.Properties.create(Material.IRON).sound(SoundType.METAL).hardnessAndResistance(1.0F).notSolid()));
    public static final RegistryObject<Block> CAST_IRON_LADDER = REGISTRY.register("cast_iron_ladder", () -> new MetalLadderBlock(false, true, Block.Properties.create(Material.IRON).sound(SoundType.METAL).hardnessAndResistance(1.0F).notSolid()));
    public static final RegistryObject<Block> BRASS_LADDER = REGISTRY.register("brass_ladder", () -> new MetalLadderBlock(false, false, Block.Properties.create(Material.IRON).sound(SoundType.METAL).hardnessAndResistance(1.0F).notSolid()));
    public static final RegistryObject<Block> CUPRONICKEL_LADDER = REGISTRY.register("cupronickel_ladder", () -> new MetalLadderBlock(false, true, Block.Properties.create(Material.IRON).sound(SoundType.METAL).hardnessAndResistance(1.0F).notSolid()));

    public static final RegistryObject<Block> PEWTER_POLE = REGISTRY.register("pewter_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> BRONZE_POLE = REGISTRY.register("bronze_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> BRASS_POLE = REGISTRY.register("brass_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> CAST_IRON_POLE = REGISTRY.register("cast_iron_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> INVAR_POLE = REGISTRY.register("invar_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> CUPRONICKEL_POLE = REGISTRY.register("cupronickel_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> DURALUMIN_POLE = REGISTRY.register("duralumin_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> MAGNESIUM_ALLOY_POLE = REGISTRY.register("magnesium_alloy_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> STERLING_SILVER_POLE = REGISTRY.register("sterling_silver_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> NICKEL_SILVER_POLE = REGISTRY.register("nickel_silver_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> ALNICO_POLE = REGISTRY.register("alnico_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> STEEL_POLE = REGISTRY.register("steel_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> STAINLESS_STEEL_POLE = REGISTRY.register("stainless_steel_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> NICKEL_SUPERALLOY_POLE = REGISTRY.register("nickel_superalloy_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> TUNGSTEN_HEAVY_ALLOY_POLE = REGISTRY.register("tungsten_heavy_alloy_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> COBALT_SUPERALLOY_POLE = REGISTRY.register("cobalt_superalloy_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> TITANIUM_ALLOY_POLE = REGISTRY.register("titanium_alloy_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> NITINOL_POLE = REGISTRY.register("nitinol_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> ROSE_METAL_POLE = REGISTRY.register("rose_metal_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> MISCHMETAL_POLE = REGISTRY.register("mischmetal_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> FERROCERIUM_POLE = REGISTRY.register("ferrocerium_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> OSMIRIDIUM_POLE = REGISTRY.register("osmiridium_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> GALINSTAN_POLE = REGISTRY.register("galinstan_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> AMALGAM_POLE = REGISTRY.register("amalgam_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> SODIUM_POTASSIUM_ALLOY_POLE = REGISTRY.register("sodium_potassium_alloy_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> ROSE_GOLD_POLE = REGISTRY.register("rose_gold_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> WHITE_GOLD_POLE = REGISTRY.register("white_gold_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> GREEN_GOLD_POLE = REGISTRY.register("green_gold_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> BLUE_GOLD_POLE = REGISTRY.register("blue_gold_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> PURPLE_GOLD_POLE = REGISTRY.register("purple_gold_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));
    public static final RegistryObject<Block> BLACK_GOLD_POLE = REGISTRY.register("black_gold_pole", () -> new RankineMetalPole(AbstractBlock.Properties.create(Material.IRON, MaterialColor.AIR).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.METAL).notSolid()));

    public static final RegistryObject<Block> PEWTER_PEDESTAL = REGISTRY.register("pewter_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BRONZE_PEDESTAL = REGISTRY.register("bronze_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BRASS_PEDESTAL = REGISTRY.register("brass_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CAST_IRON_PEDESTAL = REGISTRY.register("cast_iron_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> INVAR_PEDESTAL = REGISTRY.register("invar_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> CUPRONICKEL_PEDESTAL = REGISTRY.register("cupronickel_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> DURALUMIN_PEDESTAL = REGISTRY.register("duralumin_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> MAGNESIUM_ALLOY_PEDESTAL = REGISTRY.register("magnesium_alloy_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> STERLING_SILVER_PEDESTAL = REGISTRY.register("sterling_silver_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> NICKEL_SILVER_PEDESTAL = REGISTRY.register("nickel_silver_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ALNICO_PEDESTAL = REGISTRY.register("alnico_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> STEEL_PEDESTAL = REGISTRY.register("steel_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> STAINLESS_STEEL_PEDESTAL = REGISTRY.register("stainless_steel_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> NICKEL_SUPERALLOY_PEDESTAL = REGISTRY.register("nickel_superalloy_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TUNGSTEN_HEAVY_ALLOY_PEDESTAL = REGISTRY.register("tungsten_heavy_alloy_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> COBALT_SUPERALLOY_PEDESTAL = REGISTRY.register("cobalt_superalloy_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> TITANIUM_ALLOY_PEDESTAL = REGISTRY.register("titanium_alloy_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> NITINOL_PEDESTAL = REGISTRY.register("nitinol_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ROSE_METAL_PEDESTAL = REGISTRY.register("rose_metal_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> MISCHMETAL_PEDESTAL = REGISTRY.register("mischmetal_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> FERROCERIUM_PEDESTAL = REGISTRY.register("ferrocerium_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> OSMIRIDIUM_PEDESTAL = REGISTRY.register("osmiridium_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> GALINSTAN_PEDESTAL = REGISTRY.register("galinstan_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> AMALGAM_PEDESTAL = REGISTRY.register("amalgam_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> SODIUM_POTASSIUM_ALLOY_PEDESTAL = REGISTRY.register("sodium_potassium_alloy_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> ROSE_GOLD_PEDESTAL = REGISTRY.register("rose_gold_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> WHITE_GOLD_PEDESTAL = REGISTRY.register("white_gold_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> GREEN_GOLD_PEDESTAL = REGISTRY.register("green_gold_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BLUE_GOLD_PEDESTAL = REGISTRY.register("blue_gold_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> PURPLE_GOLD_PEDESTAL = REGISTRY.register("purple_gold_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
    public static final RegistryObject<Block> BLACK_GOLD_PEDESTAL = REGISTRY.register("black_gold_pedestal", () -> new PedestalBlock(Block.Properties.create(Material.IRON).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,10.0F).harvestLevel(0)));
 
    public static final RegistryObject<Block> ROPE = REGISTRY.register("rope", () -> new RopeBlock(Block.Properties.create(Material.CARPET).doesNotBlockMovement()));
    public static final RegistryObject<Block> BOTANIST_STATION = REGISTRY.register("botanist_station", () -> new Block(Block.Properties.create(Material.WOOD).sound(SoundType.WOOD).harvestTool(ToolType.AXE).hardnessAndResistance(2.0F).harvestLevel(0)));

    public static final RegistryObject<Block> SEDIMENT_FAN = REGISTRY.register("sediment_fan", () -> new SedimentFanBlock(Block.Properties.create(Material.IRON, MaterialColor.AIR).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,6.0F)));
    public static final RegistryObject<Block> FLUID_DRAIN = REGISTRY.register("fluid_drain", () -> new FluidDrainBlock(Block.Properties.create(Material.IRON, MaterialColor.AIR).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,6.0F)));

    public static final RegistryObject<Block> ALNICO_ELECTROMAGNET = REGISTRY.register("alnico_electromagnet", () -> new ElectromagnetBlock(1,Block.Properties.create(Material.IRON, MaterialColor.AIR).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,6.0F)));
    public static final RegistryObject<Block> RARE_EARTH_ELECTROMAGNET = REGISTRY.register("rare_earth_electromagnet", () -> new ElectromagnetBlock(2,Block.Properties.create(Material.IRON, MaterialColor.AIR).sound(SoundType.METAL).setRequiresTool().harvestTool(ToolType.PICKAXE).hardnessAndResistance(5.0F,6.0F)));

    public static final RegistryObject<Block> LIQUID_MERCURY_BLOCK = REGISTRY.register("liquid_mercury_block", () -> new FlowingFluidBlock(()-> RankineFluids.LIQUID_MERCURY,Block.Properties.create(Material.WATER).doesNotBlockMovement().hardnessAndResistance(100.0F).noDrops()));
    public static final RegistryObject<Block> SAP = REGISTRY.register("sap", () -> new FlowingFluidBlock(()-> RankineFluids.SAP,Block.Properties.create(Material.WATER).doesNotBlockMovement().hardnessAndResistance(100.0F).noDrops()));
    public static final RegistryObject<Block> MAPLE_SAP = REGISTRY.register("maple_sap", () -> new FlowingFluidBlock(()-> RankineFluids.MAPLE_SAP,Block.Properties.create(Material.WATER).doesNotBlockMovement().hardnessAndResistance(100.0F).noDrops()));
    public static final RegistryObject<Block> LATEX = REGISTRY.register("latex", () -> new FlowingFluidBlock(()-> RankineFluids.LATEX,Block.Properties.create(Material.WATER).doesNotBlockMovement().hardnessAndResistance(100.0F).noDrops()));
    public static final RegistryObject<Block> RESIN = REGISTRY.register("resin", () -> new FlowingFluidBlock(()-> RankineFluids.RESIN,Block.Properties.create(Material.WATER).doesNotBlockMovement().hardnessAndResistance(100.0F).noDrops()));
    public static final RegistryObject<Block> JUGLONE = REGISTRY.register("juglone", () -> new FlowingFluidBlock(()-> RankineFluids.JUGLONE,Block.Properties.create(Material.WATER).doesNotBlockMovement().hardnessAndResistance(100.0F).noDrops()));

    //ELEMENT BLOCKS
    public static final RegistryObject<Block> HYDROGEN_BLOCK = REGISTRY.register("hydrogen_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> HELIUM_BLOCK = REGISTRY.register("helium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> LITHIUM_BLOCK = REGISTRY.register("lithium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BERYLLIUM_BLOCK = REGISTRY.register("beryllium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BORON_BLOCK = REGISTRY.register("boron_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CARBON_BLOCK = REGISTRY.register("carbon_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NITROGEN_BLOCK = REGISTRY.register("nitrogen_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> OXYGEN_BLOCK = REGISTRY.register("oxygen_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> FLUORINE_BLOCK = REGISTRY.register("fluorine_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NEON_BLOCK = REGISTRY.register("neon_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> SODIUM_BLOCK = REGISTRY.register("sodium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> MAGNESIUM_BLOCK = REGISTRY.register("magnesium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ALUMINUM_BLOCK = REGISTRY.register("aluminum_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> SILICON_BLOCK = REGISTRY.register("silicon_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> PHOSPHORUS_BLOCK = REGISTRY.register("phosphorus_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> SULFUR_BLOCK = REGISTRY.register("sulfur_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CHLORINE_BLOCK = REGISTRY.register("chlorine_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ARGON_BLOCK = REGISTRY.register("argon_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> POTASSIUM_BLOCK = REGISTRY.register("potassium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CALCIUM_BLOCK = REGISTRY.register("calcium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> SCANDIUM_BLOCK = REGISTRY.register("scandium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TITANIUM_BLOCK = REGISTRY.register("titanium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> VANADIUM_BLOCK = REGISTRY.register("vanadium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CHROMIUM_BLOCK = REGISTRY.register("chromium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> MANGANESE_BLOCK = REGISTRY.register("manganese_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> COBALT_BLOCK = REGISTRY.register("cobalt_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NICKEL_BLOCK = REGISTRY.register("nickel_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> COPPER_BLOCK = REGISTRY.register("copper_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ZINC_BLOCK = REGISTRY.register("zinc_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> GALLIUM_BLOCK = REGISTRY.register("gallium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> GERMANIUM_BLOCK = REGISTRY.register("germanium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ARSENIC_BLOCK = REGISTRY.register("arsenic_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> SELENIUM_BLOCK = REGISTRY.register("selenium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BROMINE_BLOCK = REGISTRY.register("bromine_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> KRYPTON_BLOCK = REGISTRY.register("krypton_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> RUBIDIUM_BLOCK = REGISTRY.register("rubidium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> STRONTIUM_BLOCK = REGISTRY.register("strontium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> YTTRIUM_BLOCK = REGISTRY.register("yttrium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ZIRCONIUM_BLOCK = REGISTRY.register("zirconium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NIOBIUM_BLOCK = REGISTRY.register("niobium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> MOLYBDENUM_BLOCK = REGISTRY.register("molybdenum_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TECHNETIUM_BLOCK = REGISTRY.register("technetium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> RUTHENIUM_BLOCK = REGISTRY.register("ruthenium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> RHODIUM_BLOCK = REGISTRY.register("rhodium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> PALLADIUM_BLOCK = REGISTRY.register("palladium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> SILVER_BLOCK = REGISTRY.register("silver_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CADMIUM_BLOCK = REGISTRY.register("cadmium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> INDIUM_BLOCK = REGISTRY.register("indium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TIN_BLOCK = REGISTRY.register("tin_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ANTIMONY_BLOCK = REGISTRY.register("antimony_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TELLURIUM_BLOCK = REGISTRY.register("tellurium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> IODINE_BLOCK = REGISTRY.register("iodine_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> XENON_BLOCK = REGISTRY.register("xenon_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CESIUM_BLOCK = REGISTRY.register("cesium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BARIUM_BLOCK = REGISTRY.register("barium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> LANTHANUM_BLOCK = REGISTRY.register("lanthanum_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CERIUM_BLOCK = REGISTRY.register("cerium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> PRASEODYMIUM_BLOCK = REGISTRY.register("praseodymium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NEODYMIUM_BLOCK = REGISTRY.register("neodymium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> PROMETHIUM_BLOCK = REGISTRY.register("promethium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> SAMARIUM_BLOCK = REGISTRY.register("samarium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> EUROPIUM_BLOCK = REGISTRY.register("europium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> GADOLINIUM_BLOCK = REGISTRY.register("gadolinium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TERBIUM_BLOCK = REGISTRY.register("terbium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> DYSPROSIUM_BLOCK = REGISTRY.register("dysprosium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> HOLMIUM_BLOCK = REGISTRY.register("holmium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ERBIUM_BLOCK = REGISTRY.register("erbium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> THULIUM_BLOCK = REGISTRY.register("thulium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> YTTERBIUM_BLOCK = REGISTRY.register("ytterbium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> LUTETIUM_BLOCK = REGISTRY.register("lutetium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> HAFNIUM_BLOCK = REGISTRY.register("hafnium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TANTALUM_BLOCK = REGISTRY.register("tantalum_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TUNGSTEN_BLOCK = REGISTRY.register("tungsten_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> RHENIUM_BLOCK = REGISTRY.register("rhenium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> OSMIUM_BLOCK = REGISTRY.register("osmium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> IRIDIUM_BLOCK = REGISTRY.register("iridium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> PLATINUM_BLOCK = REGISTRY.register("platinum_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> MERCURY_BLOCK = REGISTRY.register("mercury_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> THALLIUM_BLOCK = REGISTRY.register("thallium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> LEAD_BLOCK = REGISTRY.register("lead_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BISMUTH_BLOCK = REGISTRY.register("bismuth_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> POLONIUM_BLOCK = REGISTRY.register("polonium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ASTATINE_BLOCK = REGISTRY.register("astatine_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> RADON_BLOCK = REGISTRY.register("radon_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> FRANCIUM_BLOCK = REGISTRY.register("francium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> RADIUM_BLOCK = REGISTRY.register("radium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ACTINIUM_BLOCK = REGISTRY.register("actinium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> THORIUM_BLOCK = REGISTRY.register("thorium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> PROTACTINIUM_BLOCK = REGISTRY.register("protactinium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> URANIUM_BLOCK = REGISTRY.register("uranium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NEPTUNIUM_BLOCK = REGISTRY.register("neptunium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> PLUTONIUM_BLOCK = REGISTRY.register("plutonium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> AMERICIUM_BLOCK = REGISTRY.register("americium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CURIUM_BLOCK = REGISTRY.register("curium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BERKELIUM_BLOCK = REGISTRY.register("berkelium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> CALIFORNIUM_BLOCK = REGISTRY.register("californium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> EINSTEINIUM_BLOCK = REGISTRY.register("einsteinium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> FERMIUM_BLOCK = REGISTRY.register("fermium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> MENDELEVIUM_BLOCK = REGISTRY.register("mendelevium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NOBELIUM_BLOCK = REGISTRY.register("nobelium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> LAWRENCIUM_BLOCK = REGISTRY.register("lawrencium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> RUTHERFORDIUM_BLOCK = REGISTRY.register("rutherfordium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> DUBNIUM_BLOCK = REGISTRY.register("dubnium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> SEABORGIUM_BLOCK = REGISTRY.register("seaborgium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> BOHRIUM_BLOCK = REGISTRY.register("bohrium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> HASSIUM_BLOCK = REGISTRY.register("hassium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> MEITNERIUM_BLOCK = REGISTRY.register("meitnerium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> DARMSTADTIUM_BLOCK = REGISTRY.register("darmstadtium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> ROENTGENIUM_BLOCK = REGISTRY.register("roentgenium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> COPERNICIUM_BLOCK = REGISTRY.register("copernicium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> NIHONIUM_BLOCK = REGISTRY.register("nihonium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> FLEROVIUM_BLOCK = REGISTRY.register("flerovium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> MOSCOVIUM_BLOCK = REGISTRY.register("moscovium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> LIVERMORIUM_BLOCK = REGISTRY.register("livermorium_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> TENNESSINE_BLOCK = REGISTRY.register("tennessine_block", () -> new Block(DEF_METAL_BLOCK));
    public static final RegistryObject<Block> OGANESSON_BLOCK = REGISTRY.register("oganesson_block", () -> new Block(DEF_METAL_BLOCK));

    public static final RegistryObject<Block> SODIUM_VAPOR_LAMP = REGISTRY.register("sodium_vapor_lamp", () -> new SodiumVaporLampBlock(AbstractBlock.Properties.create(Material.IRON).setRequiresTool().hardnessAndResistance(3.5F).sound(SoundType.LANTERN).setLightLevel((state) -> 15).notSolid()));


    //OTHER STUFFS

    @ObjectHolder("rankine:alloy_furnace")
    public static ContainerType<AlloyFurnaceContainer> ALLOY_FURNACE_CONTAINER;

    @ObjectHolder("rankine:alloy_furnace")
    public static TileEntityType<AlloyFurnaceTile> ALLOY_FURNACE_TILE;

    @ObjectHolder("rankine:piston_crusher")
    public static ContainerType<PistonCrusherContainer> PISTON_CRUSHER_CONTAINER;

    @ObjectHolder("rankine:piston_crusher")
    public static TileEntityType<PistonCrusherTile> PISTON_CRUSHER_TILE;

    @ObjectHolder("rankine:induction_furnace")
    public static ContainerType<InductionFurnaceContainer> INDUCTION_FURNACE_CONTAINER;

    @ObjectHolder("rankine:induction_furnace")
    public static TileEntityType<InductionFurnaceTile> INDUCTION_FURNACE_TILE;

    @ObjectHolder("rankine:rankine_box")
    public static ContainerType<RankineBoxContainer> RANKINE_BOX_CONTAINER;

    @ObjectHolder("rankine:rankine_box")
    public static TileEntityType<RankineBoxTile> RANKINE_BOX_TILE;

    @ObjectHolder("rankine:bronze_alloy_block")
    public static TileEntityType<AlloyBlockTile> ALLOY_BLOCK_TILE;

    @ObjectHolder("rankine:laser_quarry")
    public static ContainerType<LaserQuarryContainer> LASER_QUARRY_CONTAINER;

    @ObjectHolder("rankine:laser_quarry")
    public static TileEntityType<LaserQuarryTile> LASER_QUARRY_TILE;

    @ObjectHolder("rankine:gyratory_crusher")
    public static ContainerType<GyratoryCrusherContainer> GYRATORY_CRUSHER_CONTAINER;

    @ObjectHolder("rankine:gyratory_crusher")
    public static TileEntityType<GyratoryCrusherTile> GYRATORY_CRUSHER_TILE;

    @ObjectHolder("rankine:evaporation_tower")
    public static ContainerType<EvaporationTowerContainer> EVAPORATION_TOWER_CONTAINER;

    @ObjectHolder("rankine:evaporation_tower")
    public static TileEntityType<EvaporationTowerTile> EVAPORATION_TOWER_TILE;

    @ObjectHolder("rankine:crucible")
    public static ContainerType<CrucibleContainer> CRUCIBLE_CONTAINER;

    @ObjectHolder("rankine:crucible")
    public static TileEntityType<CrucibleTile> CRUCIBLE_TILE;

    @ObjectHolder("rankine:template_table")
    public static ContainerType<TemplateTableContainer> TEMPLATE_TABLE_CONTAINER;

    @ObjectHolder("rankine:fluid_drain")
    public static TileEntityType<FluidDrainTile> FLUID_DRAIN_TILE;

    @ObjectHolder("rankine:tilled_soil")
    public static TileEntityType<FluidDrainTile> TILLED_SOIL_TILE;


    public static Block getBlock(String name) {
        Block block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("rankine",name));
        if (block != null) {
            return block;
        } else {
            return Blocks.AIR;
        }
    }



    private static ToIntFunction<BlockState> getLightValueLit(int lightValue) {
        return (state) -> {
            return state.get(BlockStateProperties.LIT) ? lightValue : 0;
        };
    }
}
